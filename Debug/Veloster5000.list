
Veloster5000.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003490  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003628  08003628  00013628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003640  08003640  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08003640  08003640  00013640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003648  08003648  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003648  08003648  00013648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800364c  0800364c  0001364c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08003650  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  20000018  08003668  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08003668  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d7c7  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b0d  00000000  00000000  0002d80f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c18  00000000  00000000  0002f320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b80  00000000  00000000  0002ff38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015769  00000000  00000000  00030ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d787  00000000  00000000  00046221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a0fd  00000000  00000000  000539a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ddaa5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003320  00000000  00000000  000ddaf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000018 	.word	0x20000018
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003610 	.word	0x08003610

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000001c 	.word	0x2000001c
 80001d4:	08003610 	.word	0x08003610

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 fb76 	bl	8000bc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f81a 	bl	8000510 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 f976 	bl	80007cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e0:	f000 f94a 	bl	8000778 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80004e4:	f000 f87e 	bl	80005e4 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80004e8:	f000 f91c 	bl	8000724 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart1, var, 10);
 80004ec:	220a      	movs	r2, #10
 80004ee:	4905      	ldr	r1, [pc, #20]	; (8000504 <main+0x34>)
 80004f0:	4805      	ldr	r0, [pc, #20]	; (8000508 <main+0x38>)
 80004f2:	f002 f9dd 	bl	80028b0 <HAL_UART_Receive_IT>
  HAL_UART_Transmit_IT(&huart1, rav, 10);
 80004f6:	220a      	movs	r2, #10
 80004f8:	4904      	ldr	r1, [pc, #16]	; (800050c <main+0x3c>)
 80004fa:	4803      	ldr	r0, [pc, #12]	; (8000508 <main+0x38>)
 80004fc:	f002 f993 	bl	8002826 <HAL_UART_Transmit_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000500:	e7fe      	b.n	8000500 <main+0x30>
 8000502:	bf00      	nop
 8000504:	20000034 	.word	0x20000034
 8000508:	20000040 	.word	0x20000040
 800050c:	20000000 	.word	0x20000000

08000510 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b094      	sub	sp, #80	; 0x50
 8000514:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000516:	f107 0320 	add.w	r3, r7, #32
 800051a:	2230      	movs	r2, #48	; 0x30
 800051c:	2100      	movs	r1, #0
 800051e:	4618      	mov	r0, r3
 8000520:	f003 f86e 	bl	8003600 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000524:	f107 030c 	add.w	r3, r7, #12
 8000528:	2200      	movs	r2, #0
 800052a:	601a      	str	r2, [r3, #0]
 800052c:	605a      	str	r2, [r3, #4]
 800052e:	609a      	str	r2, [r3, #8]
 8000530:	60da      	str	r2, [r3, #12]
 8000532:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000534:	2300      	movs	r3, #0
 8000536:	60bb      	str	r3, [r7, #8]
 8000538:	4b28      	ldr	r3, [pc, #160]	; (80005dc <SystemClock_Config+0xcc>)
 800053a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800053c:	4a27      	ldr	r2, [pc, #156]	; (80005dc <SystemClock_Config+0xcc>)
 800053e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000542:	6413      	str	r3, [r2, #64]	; 0x40
 8000544:	4b25      	ldr	r3, [pc, #148]	; (80005dc <SystemClock_Config+0xcc>)
 8000546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800054c:	60bb      	str	r3, [r7, #8]
 800054e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000550:	2300      	movs	r3, #0
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	4b22      	ldr	r3, [pc, #136]	; (80005e0 <SystemClock_Config+0xd0>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a21      	ldr	r2, [pc, #132]	; (80005e0 <SystemClock_Config+0xd0>)
 800055a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800055e:	6013      	str	r3, [r2, #0]
 8000560:	4b1f      	ldr	r3, [pc, #124]	; (80005e0 <SystemClock_Config+0xd0>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000568:	607b      	str	r3, [r7, #4]
 800056a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800056c:	2302      	movs	r3, #2
 800056e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000570:	2301      	movs	r3, #1
 8000572:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000574:	2310      	movs	r3, #16
 8000576:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000578:	2302      	movs	r3, #2
 800057a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800057c:	2300      	movs	r3, #0
 800057e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000580:	2310      	movs	r3, #16
 8000582:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000584:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000588:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800058a:	2304      	movs	r3, #4
 800058c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800058e:	2304      	movs	r3, #4
 8000590:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000592:	f107 0320 	add.w	r3, r7, #32
 8000596:	4618      	mov	r0, r3
 8000598:	f000 feec 	bl	8001374 <HAL_RCC_OscConfig>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005a2:	f000 f989 	bl	80008b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a6:	230f      	movs	r3, #15
 80005a8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005aa:	2302      	movs	r3, #2
 80005ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ae:	2300      	movs	r3, #0
 80005b0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005bc:	f107 030c 	add.w	r3, r7, #12
 80005c0:	2102      	movs	r1, #2
 80005c2:	4618      	mov	r0, r3
 80005c4:	f001 f94e 	bl	8001864 <HAL_RCC_ClockConfig>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005ce:	f000 f973 	bl	80008b8 <Error_Handler>
  }
}
 80005d2:	bf00      	nop
 80005d4:	3750      	adds	r7, #80	; 0x50
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	40023800 	.word	0x40023800
 80005e0:	40007000 	.word	0x40007000

080005e4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b096      	sub	sp, #88	; 0x58
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005ea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
 80005f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005f8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000602:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]
 800060c:	609a      	str	r2, [r3, #8]
 800060e:	60da      	str	r2, [r3, #12]
 8000610:	611a      	str	r2, [r3, #16]
 8000612:	615a      	str	r2, [r3, #20]
 8000614:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000616:	1d3b      	adds	r3, r7, #4
 8000618:	2220      	movs	r2, #32
 800061a:	2100      	movs	r1, #0
 800061c:	4618      	mov	r0, r3
 800061e:	f002 ffef 	bl	8003600 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000622:	4b3e      	ldr	r3, [pc, #248]	; (800071c <MX_TIM1_Init+0x138>)
 8000624:	4a3e      	ldr	r2, [pc, #248]	; (8000720 <MX_TIM1_Init+0x13c>)
 8000626:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 839;
 8000628:	4b3c      	ldr	r3, [pc, #240]	; (800071c <MX_TIM1_Init+0x138>)
 800062a:	f240 3247 	movw	r2, #839	; 0x347
 800062e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000630:	4b3a      	ldr	r3, [pc, #232]	; (800071c <MX_TIM1_Init+0x138>)
 8000632:	2200      	movs	r2, #0
 8000634:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8000636:	4b39      	ldr	r3, [pc, #228]	; (800071c <MX_TIM1_Init+0x138>)
 8000638:	2263      	movs	r2, #99	; 0x63
 800063a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800063c:	4b37      	ldr	r3, [pc, #220]	; (800071c <MX_TIM1_Init+0x138>)
 800063e:	2200      	movs	r2, #0
 8000640:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000642:	4b36      	ldr	r3, [pc, #216]	; (800071c <MX_TIM1_Init+0x138>)
 8000644:	2200      	movs	r2, #0
 8000646:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000648:	4b34      	ldr	r3, [pc, #208]	; (800071c <MX_TIM1_Init+0x138>)
 800064a:	2200      	movs	r2, #0
 800064c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800064e:	4833      	ldr	r0, [pc, #204]	; (800071c <MX_TIM1_Init+0x138>)
 8000650:	f001 fb04 	bl	8001c5c <HAL_TIM_Base_Init>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800065a:	f000 f92d 	bl	80008b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800065e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000662:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000664:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000668:	4619      	mov	r1, r3
 800066a:	482c      	ldr	r0, [pc, #176]	; (800071c <MX_TIM1_Init+0x138>)
 800066c:	f001 fc60 	bl	8001f30 <HAL_TIM_ConfigClockSource>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000676:	f000 f91f 	bl	80008b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800067a:	4828      	ldr	r0, [pc, #160]	; (800071c <MX_TIM1_Init+0x138>)
 800067c:	f001 fb3d 	bl	8001cfa <HAL_TIM_PWM_Init>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000686:	f000 f917 	bl	80008b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800068a:	2300      	movs	r3, #0
 800068c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800068e:	2300      	movs	r3, #0
 8000690:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000692:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000696:	4619      	mov	r1, r3
 8000698:	4820      	ldr	r0, [pc, #128]	; (800071c <MX_TIM1_Init+0x138>)
 800069a:	f001 ffb7 	bl	800260c <HAL_TIMEx_MasterConfigSynchronization>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80006a4:	f000 f908 	bl	80008b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006a8:	2360      	movs	r3, #96	; 0x60
 80006aa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006b0:	2300      	movs	r3, #0
 80006b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80006b4:	2300      	movs	r3, #0
 80006b6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006b8:	2300      	movs	r3, #0
 80006ba:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006bc:	2300      	movs	r3, #0
 80006be:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006c0:	2300      	movs	r3, #0
 80006c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006c8:	2200      	movs	r2, #0
 80006ca:	4619      	mov	r1, r3
 80006cc:	4813      	ldr	r0, [pc, #76]	; (800071c <MX_TIM1_Init+0x138>)
 80006ce:	f001 fb6d 	bl	8001dac <HAL_TIM_PWM_ConfigChannel>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80006d8:	f000 f8ee 	bl	80008b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80006dc:	2300      	movs	r3, #0
 80006de:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80006e0:	2300      	movs	r3, #0
 80006e2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80006e4:	2300      	movs	r3, #0
 80006e6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80006e8:	2300      	movs	r3, #0
 80006ea:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80006ec:	2300      	movs	r3, #0
 80006ee:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80006f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006f4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80006f6:	2300      	movs	r3, #0
 80006f8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	4619      	mov	r1, r3
 80006fe:	4807      	ldr	r0, [pc, #28]	; (800071c <MX_TIM1_Init+0x138>)
 8000700:	f001 fff2 	bl	80026e8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800070a:	f000 f8d5 	bl	80008b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800070e:	4803      	ldr	r0, [pc, #12]	; (800071c <MX_TIM1_Init+0x138>)
 8000710:	f000 f922 	bl	8000958 <HAL_TIM_MspPostInit>

}
 8000714:	bf00      	nop
 8000716:	3758      	adds	r7, #88	; 0x58
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20000084 	.word	0x20000084
 8000720:	40010000 	.word	0x40010000

08000724 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000728:	4b11      	ldr	r3, [pc, #68]	; (8000770 <MX_USART1_UART_Init+0x4c>)
 800072a:	4a12      	ldr	r2, [pc, #72]	; (8000774 <MX_USART1_UART_Init+0x50>)
 800072c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800072e:	4b10      	ldr	r3, [pc, #64]	; (8000770 <MX_USART1_UART_Init+0x4c>)
 8000730:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000734:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000736:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <MX_USART1_UART_Init+0x4c>)
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800073c:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <MX_USART1_UART_Init+0x4c>)
 800073e:	2200      	movs	r2, #0
 8000740:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000742:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <MX_USART1_UART_Init+0x4c>)
 8000744:	2200      	movs	r2, #0
 8000746:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000748:	4b09      	ldr	r3, [pc, #36]	; (8000770 <MX_USART1_UART_Init+0x4c>)
 800074a:	220c      	movs	r2, #12
 800074c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074e:	4b08      	ldr	r3, [pc, #32]	; (8000770 <MX_USART1_UART_Init+0x4c>)
 8000750:	2200      	movs	r2, #0
 8000752:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <MX_USART1_UART_Init+0x4c>)
 8000756:	2200      	movs	r2, #0
 8000758:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800075a:	4805      	ldr	r0, [pc, #20]	; (8000770 <MX_USART1_UART_Init+0x4c>)
 800075c:	f002 f816 	bl	800278c <HAL_UART_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000766:	f000 f8a7 	bl	80008b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	20000040 	.word	0x20000040
 8000774:	40011000 	.word	0x40011000

08000778 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800077c:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <MX_USART2_UART_Init+0x4c>)
 800077e:	4a12      	ldr	r2, [pc, #72]	; (80007c8 <MX_USART2_UART_Init+0x50>)
 8000780:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000782:	4b10      	ldr	r3, [pc, #64]	; (80007c4 <MX_USART2_UART_Init+0x4c>)
 8000784:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000788:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800078a:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <MX_USART2_UART_Init+0x4c>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000790:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <MX_USART2_UART_Init+0x4c>)
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000796:	4b0b      	ldr	r3, [pc, #44]	; (80007c4 <MX_USART2_UART_Init+0x4c>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800079c:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <MX_USART2_UART_Init+0x4c>)
 800079e:	220c      	movs	r2, #12
 80007a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007a2:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <MX_USART2_UART_Init+0x4c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a8:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <MX_USART2_UART_Init+0x4c>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ae:	4805      	ldr	r0, [pc, #20]	; (80007c4 <MX_USART2_UART_Init+0x4c>)
 80007b0:	f001 ffec 	bl	800278c <HAL_UART_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007ba:	f000 f87d 	bl	80008b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	200000cc 	.word	0x200000cc
 80007c8:	40004400 	.word	0x40004400

080007cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08a      	sub	sp, #40	; 0x28
 80007d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d2:	f107 0314 	add.w	r3, r7, #20
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]
 80007e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	613b      	str	r3, [r7, #16]
 80007e6:	4b31      	ldr	r3, [pc, #196]	; (80008ac <MX_GPIO_Init+0xe0>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a30      	ldr	r2, [pc, #192]	; (80008ac <MX_GPIO_Init+0xe0>)
 80007ec:	f043 0304 	orr.w	r3, r3, #4
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b2e      	ldr	r3, [pc, #184]	; (80008ac <MX_GPIO_Init+0xe0>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0304 	and.w	r3, r3, #4
 80007fa:	613b      	str	r3, [r7, #16]
 80007fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	4b2a      	ldr	r3, [pc, #168]	; (80008ac <MX_GPIO_Init+0xe0>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a29      	ldr	r2, [pc, #164]	; (80008ac <MX_GPIO_Init+0xe0>)
 8000808:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b27      	ldr	r3, [pc, #156]	; (80008ac <MX_GPIO_Init+0xe0>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	60bb      	str	r3, [r7, #8]
 800081e:	4b23      	ldr	r3, [pc, #140]	; (80008ac <MX_GPIO_Init+0xe0>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a22      	ldr	r2, [pc, #136]	; (80008ac <MX_GPIO_Init+0xe0>)
 8000824:	f043 0301 	orr.w	r3, r3, #1
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b20      	ldr	r3, [pc, #128]	; (80008ac <MX_GPIO_Init+0xe0>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0301 	and.w	r3, r3, #1
 8000832:	60bb      	str	r3, [r7, #8]
 8000834:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	607b      	str	r3, [r7, #4]
 800083a:	4b1c      	ldr	r3, [pc, #112]	; (80008ac <MX_GPIO_Init+0xe0>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a1b      	ldr	r2, [pc, #108]	; (80008ac <MX_GPIO_Init+0xe0>)
 8000840:	f043 0302 	orr.w	r3, r3, #2
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b19      	ldr	r3, [pc, #100]	; (80008ac <MX_GPIO_Init+0xe0>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0302 	and.w	r3, r3, #2
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000852:	2200      	movs	r2, #0
 8000854:	2120      	movs	r1, #32
 8000856:	4816      	ldr	r0, [pc, #88]	; (80008b0 <MX_GPIO_Init+0xe4>)
 8000858:	f000 fd4e 	bl	80012f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800085c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000860:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000862:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000866:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800086c:	f107 0314 	add.w	r3, r7, #20
 8000870:	4619      	mov	r1, r3
 8000872:	4810      	ldr	r0, [pc, #64]	; (80008b4 <MX_GPIO_Init+0xe8>)
 8000874:	f000 fbbc 	bl	8000ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000878:	2320      	movs	r3, #32
 800087a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087c:	2301      	movs	r3, #1
 800087e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000884:	2300      	movs	r3, #0
 8000886:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000888:	f107 0314 	add.w	r3, r7, #20
 800088c:	4619      	mov	r1, r3
 800088e:	4808      	ldr	r0, [pc, #32]	; (80008b0 <MX_GPIO_Init+0xe4>)
 8000890:	f000 fbae 	bl	8000ff0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8000894:	2200      	movs	r2, #0
 8000896:	2101      	movs	r1, #1
 8000898:	2028      	movs	r0, #40	; 0x28
 800089a:	f000 fae0 	bl	8000e5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800089e:	2028      	movs	r0, #40	; 0x28
 80008a0:	f000 faf9 	bl	8000e96 <HAL_NVIC_EnableIRQ>

}
 80008a4:	bf00      	nop
 80008a6:	3728      	adds	r7, #40	; 0x28
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	40023800 	.word	0x40023800
 80008b0:	40020000 	.word	0x40020000
 80008b4:	40020800 	.word	0x40020800

080008b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008bc:	b672      	cpsid	i
}
 80008be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008c0:	e7fe      	b.n	80008c0 <Error_Handler+0x8>
	...

080008c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	607b      	str	r3, [r7, #4]
 80008ce:	4b10      	ldr	r3, [pc, #64]	; (8000910 <HAL_MspInit+0x4c>)
 80008d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d2:	4a0f      	ldr	r2, [pc, #60]	; (8000910 <HAL_MspInit+0x4c>)
 80008d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008d8:	6453      	str	r3, [r2, #68]	; 0x44
 80008da:	4b0d      	ldr	r3, [pc, #52]	; (8000910 <HAL_MspInit+0x4c>)
 80008dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	603b      	str	r3, [r7, #0]
 80008ea:	4b09      	ldr	r3, [pc, #36]	; (8000910 <HAL_MspInit+0x4c>)
 80008ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ee:	4a08      	ldr	r2, [pc, #32]	; (8000910 <HAL_MspInit+0x4c>)
 80008f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f4:	6413      	str	r3, [r2, #64]	; 0x40
 80008f6:	4b06      	ldr	r3, [pc, #24]	; (8000910 <HAL_MspInit+0x4c>)
 80008f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008fe:	603b      	str	r3, [r7, #0]
 8000900:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 8000902:	2006      	movs	r0, #6
 8000904:	f000 faa0 	bl	8000e48 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000908:	bf00      	nop
 800090a:	3708      	adds	r7, #8
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40023800 	.word	0x40023800

08000914 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000914:	b480      	push	{r7}
 8000916:	b085      	sub	sp, #20
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a0b      	ldr	r2, [pc, #44]	; (8000950 <HAL_TIM_Base_MspInit+0x3c>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d10d      	bne.n	8000942 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	60fb      	str	r3, [r7, #12]
 800092a:	4b0a      	ldr	r3, [pc, #40]	; (8000954 <HAL_TIM_Base_MspInit+0x40>)
 800092c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092e:	4a09      	ldr	r2, [pc, #36]	; (8000954 <HAL_TIM_Base_MspInit+0x40>)
 8000930:	f043 0301 	orr.w	r3, r3, #1
 8000934:	6453      	str	r3, [r2, #68]	; 0x44
 8000936:	4b07      	ldr	r3, [pc, #28]	; (8000954 <HAL_TIM_Base_MspInit+0x40>)
 8000938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093a:	f003 0301 	and.w	r3, r3, #1
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000942:	bf00      	nop
 8000944:	3714      	adds	r7, #20
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	40010000 	.word	0x40010000
 8000954:	40023800 	.word	0x40023800

08000958 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b088      	sub	sp, #32
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000960:	f107 030c 	add.w	r3, r7, #12
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	609a      	str	r2, [r3, #8]
 800096c:	60da      	str	r2, [r3, #12]
 800096e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a12      	ldr	r2, [pc, #72]	; (80009c0 <HAL_TIM_MspPostInit+0x68>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d11e      	bne.n	80009b8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	60bb      	str	r3, [r7, #8]
 800097e:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <HAL_TIM_MspPostInit+0x6c>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	4a10      	ldr	r2, [pc, #64]	; (80009c4 <HAL_TIM_MspPostInit+0x6c>)
 8000984:	f043 0301 	orr.w	r3, r3, #1
 8000988:	6313      	str	r3, [r2, #48]	; 0x30
 800098a:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <HAL_TIM_MspPostInit+0x6c>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	f003 0301 	and.w	r3, r3, #1
 8000992:	60bb      	str	r3, [r7, #8]
 8000994:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000996:	f44f 7380 	mov.w	r3, #256	; 0x100
 800099a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099c:	2302      	movs	r3, #2
 800099e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a4:	2300      	movs	r3, #0
 80009a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80009a8:	2301      	movs	r3, #1
 80009aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ac:	f107 030c 	add.w	r3, r7, #12
 80009b0:	4619      	mov	r1, r3
 80009b2:	4805      	ldr	r0, [pc, #20]	; (80009c8 <HAL_TIM_MspPostInit+0x70>)
 80009b4:	f000 fb1c 	bl	8000ff0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80009b8:	bf00      	nop
 80009ba:	3720      	adds	r7, #32
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	40010000 	.word	0x40010000
 80009c4:	40023800 	.word	0x40023800
 80009c8:	40020000 	.word	0x40020000

080009cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b08c      	sub	sp, #48	; 0x30
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d4:	f107 031c 	add.w	r3, r7, #28
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]
 80009e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a36      	ldr	r2, [pc, #216]	; (8000ac4 <HAL_UART_MspInit+0xf8>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d135      	bne.n	8000a5a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	61bb      	str	r3, [r7, #24]
 80009f2:	4b35      	ldr	r3, [pc, #212]	; (8000ac8 <HAL_UART_MspInit+0xfc>)
 80009f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f6:	4a34      	ldr	r2, [pc, #208]	; (8000ac8 <HAL_UART_MspInit+0xfc>)
 80009f8:	f043 0310 	orr.w	r3, r3, #16
 80009fc:	6453      	str	r3, [r2, #68]	; 0x44
 80009fe:	4b32      	ldr	r3, [pc, #200]	; (8000ac8 <HAL_UART_MspInit+0xfc>)
 8000a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a02:	f003 0310 	and.w	r3, r3, #16
 8000a06:	61bb      	str	r3, [r7, #24]
 8000a08:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	617b      	str	r3, [r7, #20]
 8000a0e:	4b2e      	ldr	r3, [pc, #184]	; (8000ac8 <HAL_UART_MspInit+0xfc>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	4a2d      	ldr	r2, [pc, #180]	; (8000ac8 <HAL_UART_MspInit+0xfc>)
 8000a14:	f043 0301 	orr.w	r3, r3, #1
 8000a18:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1a:	4b2b      	ldr	r3, [pc, #172]	; (8000ac8 <HAL_UART_MspInit+0xfc>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	617b      	str	r3, [r7, #20]
 8000a24:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a26:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a34:	2303      	movs	r3, #3
 8000a36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a38:	2307      	movs	r3, #7
 8000a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3c:	f107 031c 	add.w	r3, r7, #28
 8000a40:	4619      	mov	r1, r3
 8000a42:	4822      	ldr	r0, [pc, #136]	; (8000acc <HAL_UART_MspInit+0x100>)
 8000a44:	f000 fad4 	bl	8000ff0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	2101      	movs	r1, #1
 8000a4c:	2025      	movs	r0, #37	; 0x25
 8000a4e:	f000 fa06 	bl	8000e5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a52:	2025      	movs	r0, #37	; 0x25
 8000a54:	f000 fa1f 	bl	8000e96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a58:	e030      	b.n	8000abc <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4a1c      	ldr	r2, [pc, #112]	; (8000ad0 <HAL_UART_MspInit+0x104>)
 8000a60:	4293      	cmp	r3, r2
 8000a62:	d12b      	bne.n	8000abc <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a64:	2300      	movs	r3, #0
 8000a66:	613b      	str	r3, [r7, #16]
 8000a68:	4b17      	ldr	r3, [pc, #92]	; (8000ac8 <HAL_UART_MspInit+0xfc>)
 8000a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6c:	4a16      	ldr	r2, [pc, #88]	; (8000ac8 <HAL_UART_MspInit+0xfc>)
 8000a6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a72:	6413      	str	r3, [r2, #64]	; 0x40
 8000a74:	4b14      	ldr	r3, [pc, #80]	; (8000ac8 <HAL_UART_MspInit+0xfc>)
 8000a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a7c:	613b      	str	r3, [r7, #16]
 8000a7e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a80:	2300      	movs	r3, #0
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	4b10      	ldr	r3, [pc, #64]	; (8000ac8 <HAL_UART_MspInit+0xfc>)
 8000a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a88:	4a0f      	ldr	r2, [pc, #60]	; (8000ac8 <HAL_UART_MspInit+0xfc>)
 8000a8a:	f043 0301 	orr.w	r3, r3, #1
 8000a8e:	6313      	str	r3, [r2, #48]	; 0x30
 8000a90:	4b0d      	ldr	r3, [pc, #52]	; (8000ac8 <HAL_UART_MspInit+0xfc>)
 8000a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a94:	f003 0301 	and.w	r3, r3, #1
 8000a98:	60fb      	str	r3, [r7, #12]
 8000a9a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a9c:	230c      	movs	r3, #12
 8000a9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa8:	2303      	movs	r3, #3
 8000aaa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000aac:	2307      	movs	r3, #7
 8000aae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab0:	f107 031c 	add.w	r3, r7, #28
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4805      	ldr	r0, [pc, #20]	; (8000acc <HAL_UART_MspInit+0x100>)
 8000ab8:	f000 fa9a 	bl	8000ff0 <HAL_GPIO_Init>
}
 8000abc:	bf00      	nop
 8000abe:	3730      	adds	r7, #48	; 0x30
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40011000 	.word	0x40011000
 8000ac8:	40023800 	.word	0x40023800
 8000acc:	40020000 	.word	0x40020000
 8000ad0:	40004400 	.word	0x40004400

08000ad4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ad8:	e7fe      	b.n	8000ad8 <NMI_Handler+0x4>

08000ada <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ada:	b480      	push	{r7}
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ade:	e7fe      	b.n	8000ade <HardFault_Handler+0x4>

08000ae0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae4:	e7fe      	b.n	8000ae4 <MemManage_Handler+0x4>

08000ae6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aea:	e7fe      	b.n	8000aea <BusFault_Handler+0x4>

08000aec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af0:	e7fe      	b.n	8000af0 <UsageFault_Handler+0x4>

08000af2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr

08000b00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr

08000b0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b12:	bf00      	nop
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr

08000b1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b20:	f000 f8a2 	bl	8000c68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b24:	bf00      	nop
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b2c:	4802      	ldr	r0, [pc, #8]	; (8000b38 <USART1_IRQHandler+0x10>)
 8000b2e:	f001 feef 	bl	8002910 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20000040 	.word	0x20000040

08000b3c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000b40:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000b44:	f000 fbf2 	bl	800132c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b48:	bf00      	nop
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b50:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <SystemInit+0x20>)
 8000b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b56:	4a05      	ldr	r2, [pc, #20]	; (8000b6c <SystemInit+0x20>)
 8000b58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b60:	bf00      	nop
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	e000ed00 	.word	0xe000ed00

08000b70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ba8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b74:	480d      	ldr	r0, [pc, #52]	; (8000bac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b76:	490e      	ldr	r1, [pc, #56]	; (8000bb0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b78:	4a0e      	ldr	r2, [pc, #56]	; (8000bb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b7c:	e002      	b.n	8000b84 <LoopCopyDataInit>

08000b7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b82:	3304      	adds	r3, #4

08000b84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b88:	d3f9      	bcc.n	8000b7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b8a:	4a0b      	ldr	r2, [pc, #44]	; (8000bb8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b8c:	4c0b      	ldr	r4, [pc, #44]	; (8000bbc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b90:	e001      	b.n	8000b96 <LoopFillZerobss>

08000b92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b94:	3204      	adds	r2, #4

08000b96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b98:	d3fb      	bcc.n	8000b92 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b9a:	f7ff ffd7 	bl	8000b4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b9e:	f002 fd0b 	bl	80035b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ba2:	f7ff fc95 	bl	80004d0 <main>
  bx  lr    
 8000ba6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ba8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bb0:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000bb4:	08003650 	.word	0x08003650
  ldr r2, =_sbss
 8000bb8:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000bbc:	20000114 	.word	0x20000114

08000bc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bc0:	e7fe      	b.n	8000bc0 <ADC_IRQHandler>
	...

08000bc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bc8:	4b0e      	ldr	r3, [pc, #56]	; (8000c04 <HAL_Init+0x40>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a0d      	ldr	r2, [pc, #52]	; (8000c04 <HAL_Init+0x40>)
 8000bce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bd4:	4b0b      	ldr	r3, [pc, #44]	; (8000c04 <HAL_Init+0x40>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a0a      	ldr	r2, [pc, #40]	; (8000c04 <HAL_Init+0x40>)
 8000bda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000be0:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <HAL_Init+0x40>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a07      	ldr	r2, [pc, #28]	; (8000c04 <HAL_Init+0x40>)
 8000be6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bec:	2003      	movs	r0, #3
 8000bee:	f000 f92b 	bl	8000e48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bf2:	2000      	movs	r0, #0
 8000bf4:	f000 f808 	bl	8000c08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bf8:	f7ff fe64 	bl	80008c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bfc:	2300      	movs	r3, #0
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40023c00 	.word	0x40023c00

08000c08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c10:	4b12      	ldr	r3, [pc, #72]	; (8000c5c <HAL_InitTick+0x54>)
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	4b12      	ldr	r3, [pc, #72]	; (8000c60 <HAL_InitTick+0x58>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	4619      	mov	r1, r3
 8000c1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c26:	4618      	mov	r0, r3
 8000c28:	f000 f943 	bl	8000eb2 <HAL_SYSTICK_Config>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
 8000c34:	e00e      	b.n	8000c54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	2b0f      	cmp	r3, #15
 8000c3a:	d80a      	bhi.n	8000c52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	6879      	ldr	r1, [r7, #4]
 8000c40:	f04f 30ff 	mov.w	r0, #4294967295
 8000c44:	f000 f90b 	bl	8000e5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c48:	4a06      	ldr	r2, [pc, #24]	; (8000c64 <HAL_InitTick+0x5c>)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	e000      	b.n	8000c54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c52:	2301      	movs	r3, #1
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	2000000c 	.word	0x2000000c
 8000c60:	20000014 	.word	0x20000014
 8000c64:	20000010 	.word	0x20000010

08000c68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c6c:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <HAL_IncTick+0x20>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	461a      	mov	r2, r3
 8000c72:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <HAL_IncTick+0x24>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4413      	add	r3, r2
 8000c78:	4a04      	ldr	r2, [pc, #16]	; (8000c8c <HAL_IncTick+0x24>)
 8000c7a:	6013      	str	r3, [r2, #0]
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	20000014 	.word	0x20000014
 8000c8c:	20000110 	.word	0x20000110

08000c90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  return uwTick;
 8000c94:	4b03      	ldr	r3, [pc, #12]	; (8000ca4 <HAL_GetTick+0x14>)
 8000c96:	681b      	ldr	r3, [r3, #0]
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	20000110 	.word	0x20000110

08000ca8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b085      	sub	sp, #20
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	f003 0307 	and.w	r3, r3, #7
 8000cb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cb8:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__NVIC_SetPriorityGrouping+0x44>)
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cbe:	68ba      	ldr	r2, [r7, #8]
 8000cc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cda:	4a04      	ldr	r2, [pc, #16]	; (8000cec <__NVIC_SetPriorityGrouping+0x44>)
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	60d3      	str	r3, [r2, #12]
}
 8000ce0:	bf00      	nop
 8000ce2:	3714      	adds	r7, #20
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	e000ed00 	.word	0xe000ed00

08000cf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cf4:	4b04      	ldr	r3, [pc, #16]	; (8000d08 <__NVIC_GetPriorityGrouping+0x18>)
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	0a1b      	lsrs	r3, r3, #8
 8000cfa:	f003 0307 	and.w	r3, r3, #7
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	e000ed00 	.word	0xe000ed00

08000d0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	db0b      	blt.n	8000d36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	f003 021f 	and.w	r2, r3, #31
 8000d24:	4907      	ldr	r1, [pc, #28]	; (8000d44 <__NVIC_EnableIRQ+0x38>)
 8000d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2a:	095b      	lsrs	r3, r3, #5
 8000d2c:	2001      	movs	r0, #1
 8000d2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d36:	bf00      	nop
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	e000e100 	.word	0xe000e100

08000d48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	6039      	str	r1, [r7, #0]
 8000d52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	db0a      	blt.n	8000d72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	b2da      	uxtb	r2, r3
 8000d60:	490c      	ldr	r1, [pc, #48]	; (8000d94 <__NVIC_SetPriority+0x4c>)
 8000d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d66:	0112      	lsls	r2, r2, #4
 8000d68:	b2d2      	uxtb	r2, r2
 8000d6a:	440b      	add	r3, r1
 8000d6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d70:	e00a      	b.n	8000d88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	b2da      	uxtb	r2, r3
 8000d76:	4908      	ldr	r1, [pc, #32]	; (8000d98 <__NVIC_SetPriority+0x50>)
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	f003 030f 	and.w	r3, r3, #15
 8000d7e:	3b04      	subs	r3, #4
 8000d80:	0112      	lsls	r2, r2, #4
 8000d82:	b2d2      	uxtb	r2, r2
 8000d84:	440b      	add	r3, r1
 8000d86:	761a      	strb	r2, [r3, #24]
}
 8000d88:	bf00      	nop
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	e000e100 	.word	0xe000e100
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b089      	sub	sp, #36	; 0x24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	60f8      	str	r0, [r7, #12]
 8000da4:	60b9      	str	r1, [r7, #8]
 8000da6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	f003 0307 	and.w	r3, r3, #7
 8000dae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	f1c3 0307 	rsb	r3, r3, #7
 8000db6:	2b04      	cmp	r3, #4
 8000db8:	bf28      	it	cs
 8000dba:	2304      	movcs	r3, #4
 8000dbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	3304      	adds	r3, #4
 8000dc2:	2b06      	cmp	r3, #6
 8000dc4:	d902      	bls.n	8000dcc <NVIC_EncodePriority+0x30>
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	3b03      	subs	r3, #3
 8000dca:	e000      	b.n	8000dce <NVIC_EncodePriority+0x32>
 8000dcc:	2300      	movs	r3, #0
 8000dce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8000dd4:	69bb      	ldr	r3, [r7, #24]
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	43da      	mvns	r2, r3
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	401a      	ands	r2, r3
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000de4:	f04f 31ff 	mov.w	r1, #4294967295
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	fa01 f303 	lsl.w	r3, r1, r3
 8000dee:	43d9      	mvns	r1, r3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df4:	4313      	orrs	r3, r2
         );
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3724      	adds	r7, #36	; 0x24
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
	...

08000e04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	3b01      	subs	r3, #1
 8000e10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e14:	d301      	bcc.n	8000e1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e16:	2301      	movs	r3, #1
 8000e18:	e00f      	b.n	8000e3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e1a:	4a0a      	ldr	r2, [pc, #40]	; (8000e44 <SysTick_Config+0x40>)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	3b01      	subs	r3, #1
 8000e20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e22:	210f      	movs	r1, #15
 8000e24:	f04f 30ff 	mov.w	r0, #4294967295
 8000e28:	f7ff ff8e 	bl	8000d48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e2c:	4b05      	ldr	r3, [pc, #20]	; (8000e44 <SysTick_Config+0x40>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e32:	4b04      	ldr	r3, [pc, #16]	; (8000e44 <SysTick_Config+0x40>)
 8000e34:	2207      	movs	r2, #7
 8000e36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e38:	2300      	movs	r3, #0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	e000e010 	.word	0xe000e010

08000e48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e50:	6878      	ldr	r0, [r7, #4]
 8000e52:	f7ff ff29 	bl	8000ca8 <__NVIC_SetPriorityGrouping>
}
 8000e56:	bf00      	nop
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b086      	sub	sp, #24
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	4603      	mov	r3, r0
 8000e66:	60b9      	str	r1, [r7, #8]
 8000e68:	607a      	str	r2, [r7, #4]
 8000e6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e70:	f7ff ff3e 	bl	8000cf0 <__NVIC_GetPriorityGrouping>
 8000e74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e76:	687a      	ldr	r2, [r7, #4]
 8000e78:	68b9      	ldr	r1, [r7, #8]
 8000e7a:	6978      	ldr	r0, [r7, #20]
 8000e7c:	f7ff ff8e 	bl	8000d9c <NVIC_EncodePriority>
 8000e80:	4602      	mov	r2, r0
 8000e82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e86:	4611      	mov	r1, r2
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff ff5d 	bl	8000d48 <__NVIC_SetPriority>
}
 8000e8e:	bf00      	nop
 8000e90:	3718      	adds	r7, #24
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b082      	sub	sp, #8
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff ff31 	bl	8000d0c <__NVIC_EnableIRQ>
}
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b082      	sub	sp, #8
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f7ff ffa2 	bl	8000e04 <SysTick_Config>
 8000ec0:	4603      	mov	r3, r0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b084      	sub	sp, #16
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ed6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000ed8:	f7ff feda 	bl	8000c90 <HAL_GetTick>
 8000edc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	2b02      	cmp	r3, #2
 8000ee8:	d008      	beq.n	8000efc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2280      	movs	r2, #128	; 0x80
 8000eee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	e052      	b.n	8000fa2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f022 0216 	bic.w	r2, r2, #22
 8000f0a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	695a      	ldr	r2, [r3, #20]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f1a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d103      	bne.n	8000f2c <HAL_DMA_Abort+0x62>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d007      	beq.n	8000f3c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f022 0208 	bic.w	r2, r2, #8
 8000f3a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f022 0201 	bic.w	r2, r2, #1
 8000f4a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f4c:	e013      	b.n	8000f76 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f4e:	f7ff fe9f 	bl	8000c90 <HAL_GetTick>
 8000f52:	4602      	mov	r2, r0
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	1ad3      	subs	r3, r2, r3
 8000f58:	2b05      	cmp	r3, #5
 8000f5a:	d90c      	bls.n	8000f76 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2220      	movs	r2, #32
 8000f60:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2203      	movs	r2, #3
 8000f66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000f72:	2303      	movs	r3, #3
 8000f74:	e015      	b.n	8000fa2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f003 0301 	and.w	r3, r3, #1
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d1e4      	bne.n	8000f4e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f88:	223f      	movs	r2, #63	; 0x3f
 8000f8a:	409a      	lsls	r2, r3
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2201      	movs	r2, #1
 8000f94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000fa0:	2300      	movs	r3, #0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000faa:	b480      	push	{r7}
 8000fac:	b083      	sub	sp, #12
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	2b02      	cmp	r3, #2
 8000fbc:	d004      	beq.n	8000fc8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2280      	movs	r2, #128	; 0x80
 8000fc2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	e00c      	b.n	8000fe2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2205      	movs	r2, #5
 8000fcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f022 0201 	bic.w	r2, r2, #1
 8000fde:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
	...

08000ff0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b089      	sub	sp, #36	; 0x24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ffe:	2300      	movs	r3, #0
 8001000:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001002:	2300      	movs	r3, #0
 8001004:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001006:	2300      	movs	r3, #0
 8001008:	61fb      	str	r3, [r7, #28]
 800100a:	e159      	b.n	80012c0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800100c:	2201      	movs	r2, #1
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	697a      	ldr	r2, [r7, #20]
 800101c:	4013      	ands	r3, r2
 800101e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	429a      	cmp	r2, r3
 8001026:	f040 8148 	bne.w	80012ba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	f003 0303 	and.w	r3, r3, #3
 8001032:	2b01      	cmp	r3, #1
 8001034:	d005      	beq.n	8001042 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800103e:	2b02      	cmp	r3, #2
 8001040:	d130      	bne.n	80010a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	2203      	movs	r2, #3
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	43db      	mvns	r3, r3
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	4013      	ands	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	68da      	ldr	r2, [r3, #12]
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	4313      	orrs	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001078:	2201      	movs	r2, #1
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	43db      	mvns	r3, r3
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	4013      	ands	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	091b      	lsrs	r3, r3, #4
 800108e:	f003 0201 	and.w	r2, r3, #1
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	4313      	orrs	r3, r2
 800109c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f003 0303 	and.w	r3, r3, #3
 80010ac:	2b03      	cmp	r3, #3
 80010ae:	d017      	beq.n	80010e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	2203      	movs	r2, #3
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	43db      	mvns	r3, r3
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	4013      	ands	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	689a      	ldr	r2, [r3, #8]
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f003 0303 	and.w	r3, r3, #3
 80010e8:	2b02      	cmp	r3, #2
 80010ea:	d123      	bne.n	8001134 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	08da      	lsrs	r2, r3, #3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	3208      	adds	r2, #8
 80010f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	f003 0307 	and.w	r3, r3, #7
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	220f      	movs	r2, #15
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	43db      	mvns	r3, r3
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	4013      	ands	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	691a      	ldr	r2, [r3, #16]
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	f003 0307 	and.w	r3, r3, #7
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4313      	orrs	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	08da      	lsrs	r2, r3, #3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	3208      	adds	r2, #8
 800112e:	69b9      	ldr	r1, [r7, #24]
 8001130:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	2203      	movs	r2, #3
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	43db      	mvns	r3, r3
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	4013      	ands	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f003 0203 	and.w	r2, r3, #3
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	4313      	orrs	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001170:	2b00      	cmp	r3, #0
 8001172:	f000 80a2 	beq.w	80012ba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	4b57      	ldr	r3, [pc, #348]	; (80012d8 <HAL_GPIO_Init+0x2e8>)
 800117c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117e:	4a56      	ldr	r2, [pc, #344]	; (80012d8 <HAL_GPIO_Init+0x2e8>)
 8001180:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001184:	6453      	str	r3, [r2, #68]	; 0x44
 8001186:	4b54      	ldr	r3, [pc, #336]	; (80012d8 <HAL_GPIO_Init+0x2e8>)
 8001188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001192:	4a52      	ldr	r2, [pc, #328]	; (80012dc <HAL_GPIO_Init+0x2ec>)
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	089b      	lsrs	r3, r3, #2
 8001198:	3302      	adds	r3, #2
 800119a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800119e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	f003 0303 	and.w	r3, r3, #3
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	220f      	movs	r2, #15
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	43db      	mvns	r3, r3
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	4013      	ands	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a49      	ldr	r2, [pc, #292]	; (80012e0 <HAL_GPIO_Init+0x2f0>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d019      	beq.n	80011f2 <HAL_GPIO_Init+0x202>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a48      	ldr	r2, [pc, #288]	; (80012e4 <HAL_GPIO_Init+0x2f4>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d013      	beq.n	80011ee <HAL_GPIO_Init+0x1fe>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a47      	ldr	r2, [pc, #284]	; (80012e8 <HAL_GPIO_Init+0x2f8>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d00d      	beq.n	80011ea <HAL_GPIO_Init+0x1fa>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a46      	ldr	r2, [pc, #280]	; (80012ec <HAL_GPIO_Init+0x2fc>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d007      	beq.n	80011e6 <HAL_GPIO_Init+0x1f6>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a45      	ldr	r2, [pc, #276]	; (80012f0 <HAL_GPIO_Init+0x300>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d101      	bne.n	80011e2 <HAL_GPIO_Init+0x1f2>
 80011de:	2304      	movs	r3, #4
 80011e0:	e008      	b.n	80011f4 <HAL_GPIO_Init+0x204>
 80011e2:	2307      	movs	r3, #7
 80011e4:	e006      	b.n	80011f4 <HAL_GPIO_Init+0x204>
 80011e6:	2303      	movs	r3, #3
 80011e8:	e004      	b.n	80011f4 <HAL_GPIO_Init+0x204>
 80011ea:	2302      	movs	r3, #2
 80011ec:	e002      	b.n	80011f4 <HAL_GPIO_Init+0x204>
 80011ee:	2301      	movs	r3, #1
 80011f0:	e000      	b.n	80011f4 <HAL_GPIO_Init+0x204>
 80011f2:	2300      	movs	r3, #0
 80011f4:	69fa      	ldr	r2, [r7, #28]
 80011f6:	f002 0203 	and.w	r2, r2, #3
 80011fa:	0092      	lsls	r2, r2, #2
 80011fc:	4093      	lsls	r3, r2
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4313      	orrs	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001204:	4935      	ldr	r1, [pc, #212]	; (80012dc <HAL_GPIO_Init+0x2ec>)
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	089b      	lsrs	r3, r3, #2
 800120a:	3302      	adds	r3, #2
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001212:	4b38      	ldr	r3, [pc, #224]	; (80012f4 <HAL_GPIO_Init+0x304>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	43db      	mvns	r3, r3
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4013      	ands	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d003      	beq.n	8001236 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	4313      	orrs	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001236:	4a2f      	ldr	r2, [pc, #188]	; (80012f4 <HAL_GPIO_Init+0x304>)
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800123c:	4b2d      	ldr	r3, [pc, #180]	; (80012f4 <HAL_GPIO_Init+0x304>)
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	43db      	mvns	r3, r3
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	4013      	ands	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001254:	2b00      	cmp	r3, #0
 8001256:	d003      	beq.n	8001260 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	4313      	orrs	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001260:	4a24      	ldr	r2, [pc, #144]	; (80012f4 <HAL_GPIO_Init+0x304>)
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001266:	4b23      	ldr	r3, [pc, #140]	; (80012f4 <HAL_GPIO_Init+0x304>)
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	43db      	mvns	r3, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4013      	ands	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d003      	beq.n	800128a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	4313      	orrs	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800128a:	4a1a      	ldr	r2, [pc, #104]	; (80012f4 <HAL_GPIO_Init+0x304>)
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001290:	4b18      	ldr	r3, [pc, #96]	; (80012f4 <HAL_GPIO_Init+0x304>)
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	43db      	mvns	r3, r3
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4013      	ands	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d003      	beq.n	80012b4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012b4:	4a0f      	ldr	r2, [pc, #60]	; (80012f4 <HAL_GPIO_Init+0x304>)
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	3301      	adds	r3, #1
 80012be:	61fb      	str	r3, [r7, #28]
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	2b0f      	cmp	r3, #15
 80012c4:	f67f aea2 	bls.w	800100c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012c8:	bf00      	nop
 80012ca:	bf00      	nop
 80012cc:	3724      	adds	r7, #36	; 0x24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	40023800 	.word	0x40023800
 80012dc:	40013800 	.word	0x40013800
 80012e0:	40020000 	.word	0x40020000
 80012e4:	40020400 	.word	0x40020400
 80012e8:	40020800 	.word	0x40020800
 80012ec:	40020c00 	.word	0x40020c00
 80012f0:	40021000 	.word	0x40021000
 80012f4:	40013c00 	.word	0x40013c00

080012f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	460b      	mov	r3, r1
 8001302:	807b      	strh	r3, [r7, #2]
 8001304:	4613      	mov	r3, r2
 8001306:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001308:	787b      	ldrb	r3, [r7, #1]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d003      	beq.n	8001316 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800130e:	887a      	ldrh	r2, [r7, #2]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001314:	e003      	b.n	800131e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001316:	887b      	ldrh	r3, [r7, #2]
 8001318:	041a      	lsls	r2, r3, #16
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	619a      	str	r2, [r3, #24]
}
 800131e:	bf00      	nop
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
	...

0800132c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001336:	4b08      	ldr	r3, [pc, #32]	; (8001358 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001338:	695a      	ldr	r2, [r3, #20]
 800133a:	88fb      	ldrh	r3, [r7, #6]
 800133c:	4013      	ands	r3, r2
 800133e:	2b00      	cmp	r3, #0
 8001340:	d006      	beq.n	8001350 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001342:	4a05      	ldr	r2, [pc, #20]	; (8001358 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001344:	88fb      	ldrh	r3, [r7, #6]
 8001346:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001348:	88fb      	ldrh	r3, [r7, #6]
 800134a:	4618      	mov	r0, r3
 800134c:	f000 f806 	bl	800135c <HAL_GPIO_EXTI_Callback>
  }
}
 8001350:	bf00      	nop
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40013c00 	.word	0x40013c00

0800135c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001366:	bf00      	nop
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
	...

08001374 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d101      	bne.n	8001386 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e264      	b.n	8001850 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	2b00      	cmp	r3, #0
 8001390:	d075      	beq.n	800147e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001392:	4ba3      	ldr	r3, [pc, #652]	; (8001620 <HAL_RCC_OscConfig+0x2ac>)
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	f003 030c 	and.w	r3, r3, #12
 800139a:	2b04      	cmp	r3, #4
 800139c:	d00c      	beq.n	80013b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800139e:	4ba0      	ldr	r3, [pc, #640]	; (8001620 <HAL_RCC_OscConfig+0x2ac>)
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013a6:	2b08      	cmp	r3, #8
 80013a8:	d112      	bne.n	80013d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013aa:	4b9d      	ldr	r3, [pc, #628]	; (8001620 <HAL_RCC_OscConfig+0x2ac>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013b6:	d10b      	bne.n	80013d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013b8:	4b99      	ldr	r3, [pc, #612]	; (8001620 <HAL_RCC_OscConfig+0x2ac>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d05b      	beq.n	800147c <HAL_RCC_OscConfig+0x108>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d157      	bne.n	800147c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e23f      	b.n	8001850 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013d8:	d106      	bne.n	80013e8 <HAL_RCC_OscConfig+0x74>
 80013da:	4b91      	ldr	r3, [pc, #580]	; (8001620 <HAL_RCC_OscConfig+0x2ac>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a90      	ldr	r2, [pc, #576]	; (8001620 <HAL_RCC_OscConfig+0x2ac>)
 80013e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013e4:	6013      	str	r3, [r2, #0]
 80013e6:	e01d      	b.n	8001424 <HAL_RCC_OscConfig+0xb0>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013f0:	d10c      	bne.n	800140c <HAL_RCC_OscConfig+0x98>
 80013f2:	4b8b      	ldr	r3, [pc, #556]	; (8001620 <HAL_RCC_OscConfig+0x2ac>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a8a      	ldr	r2, [pc, #552]	; (8001620 <HAL_RCC_OscConfig+0x2ac>)
 80013f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013fc:	6013      	str	r3, [r2, #0]
 80013fe:	4b88      	ldr	r3, [pc, #544]	; (8001620 <HAL_RCC_OscConfig+0x2ac>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a87      	ldr	r2, [pc, #540]	; (8001620 <HAL_RCC_OscConfig+0x2ac>)
 8001404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001408:	6013      	str	r3, [r2, #0]
 800140a:	e00b      	b.n	8001424 <HAL_RCC_OscConfig+0xb0>
 800140c:	4b84      	ldr	r3, [pc, #528]	; (8001620 <HAL_RCC_OscConfig+0x2ac>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a83      	ldr	r2, [pc, #524]	; (8001620 <HAL_RCC_OscConfig+0x2ac>)
 8001412:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001416:	6013      	str	r3, [r2, #0]
 8001418:	4b81      	ldr	r3, [pc, #516]	; (8001620 <HAL_RCC_OscConfig+0x2ac>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a80      	ldr	r2, [pc, #512]	; (8001620 <HAL_RCC_OscConfig+0x2ac>)
 800141e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001422:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d013      	beq.n	8001454 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800142c:	f7ff fc30 	bl	8000c90 <HAL_GetTick>
 8001430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001432:	e008      	b.n	8001446 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001434:	f7ff fc2c 	bl	8000c90 <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b64      	cmp	r3, #100	; 0x64
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e204      	b.n	8001850 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001446:	4b76      	ldr	r3, [pc, #472]	; (8001620 <HAL_RCC_OscConfig+0x2ac>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d0f0      	beq.n	8001434 <HAL_RCC_OscConfig+0xc0>
 8001452:	e014      	b.n	800147e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001454:	f7ff fc1c 	bl	8000c90 <HAL_GetTick>
 8001458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800145a:	e008      	b.n	800146e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800145c:	f7ff fc18 	bl	8000c90 <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	2b64      	cmp	r3, #100	; 0x64
 8001468:	d901      	bls.n	800146e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e1f0      	b.n	8001850 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800146e:	4b6c      	ldr	r3, [pc, #432]	; (8001620 <HAL_RCC_OscConfig+0x2ac>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d1f0      	bne.n	800145c <HAL_RCC_OscConfig+0xe8>
 800147a:	e000      	b.n	800147e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800147c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	2b00      	cmp	r3, #0
 8001488:	d063      	beq.n	8001552 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800148a:	4b65      	ldr	r3, [pc, #404]	; (8001620 <HAL_RCC_OscConfig+0x2ac>)
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	f003 030c 	and.w	r3, r3, #12
 8001492:	2b00      	cmp	r3, #0
 8001494:	d00b      	beq.n	80014ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001496:	4b62      	ldr	r3, [pc, #392]	; (8001620 <HAL_RCC_OscConfig+0x2ac>)
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800149e:	2b08      	cmp	r3, #8
 80014a0:	d11c      	bne.n	80014dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014a2:	4b5f      	ldr	r3, [pc, #380]	; (8001620 <HAL_RCC_OscConfig+0x2ac>)
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d116      	bne.n	80014dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ae:	4b5c      	ldr	r3, [pc, #368]	; (8001620 <HAL_RCC_OscConfig+0x2ac>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d005      	beq.n	80014c6 <HAL_RCC_OscConfig+0x152>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	68db      	ldr	r3, [r3, #12]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d001      	beq.n	80014c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e1c4      	b.n	8001850 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014c6:	4b56      	ldr	r3, [pc, #344]	; (8001620 <HAL_RCC_OscConfig+0x2ac>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	691b      	ldr	r3, [r3, #16]
 80014d2:	00db      	lsls	r3, r3, #3
 80014d4:	4952      	ldr	r1, [pc, #328]	; (8001620 <HAL_RCC_OscConfig+0x2ac>)
 80014d6:	4313      	orrs	r3, r2
 80014d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014da:	e03a      	b.n	8001552 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d020      	beq.n	8001526 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014e4:	4b4f      	ldr	r3, [pc, #316]	; (8001624 <HAL_RCC_OscConfig+0x2b0>)
 80014e6:	2201      	movs	r2, #1
 80014e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ea:	f7ff fbd1 	bl	8000c90 <HAL_GetTick>
 80014ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014f0:	e008      	b.n	8001504 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014f2:	f7ff fbcd 	bl	8000c90 <HAL_GetTick>
 80014f6:	4602      	mov	r2, r0
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d901      	bls.n	8001504 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001500:	2303      	movs	r3, #3
 8001502:	e1a5      	b.n	8001850 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001504:	4b46      	ldr	r3, [pc, #280]	; (8001620 <HAL_RCC_OscConfig+0x2ac>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 0302 	and.w	r3, r3, #2
 800150c:	2b00      	cmp	r3, #0
 800150e:	d0f0      	beq.n	80014f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001510:	4b43      	ldr	r3, [pc, #268]	; (8001620 <HAL_RCC_OscConfig+0x2ac>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	691b      	ldr	r3, [r3, #16]
 800151c:	00db      	lsls	r3, r3, #3
 800151e:	4940      	ldr	r1, [pc, #256]	; (8001620 <HAL_RCC_OscConfig+0x2ac>)
 8001520:	4313      	orrs	r3, r2
 8001522:	600b      	str	r3, [r1, #0]
 8001524:	e015      	b.n	8001552 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001526:	4b3f      	ldr	r3, [pc, #252]	; (8001624 <HAL_RCC_OscConfig+0x2b0>)
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800152c:	f7ff fbb0 	bl	8000c90 <HAL_GetTick>
 8001530:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001532:	e008      	b.n	8001546 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001534:	f7ff fbac 	bl	8000c90 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b02      	cmp	r3, #2
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e184      	b.n	8001850 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001546:	4b36      	ldr	r3, [pc, #216]	; (8001620 <HAL_RCC_OscConfig+0x2ac>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1f0      	bne.n	8001534 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0308 	and.w	r3, r3, #8
 800155a:	2b00      	cmp	r3, #0
 800155c:	d030      	beq.n	80015c0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	695b      	ldr	r3, [r3, #20]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d016      	beq.n	8001594 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001566:	4b30      	ldr	r3, [pc, #192]	; (8001628 <HAL_RCC_OscConfig+0x2b4>)
 8001568:	2201      	movs	r2, #1
 800156a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800156c:	f7ff fb90 	bl	8000c90 <HAL_GetTick>
 8001570:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001572:	e008      	b.n	8001586 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001574:	f7ff fb8c 	bl	8000c90 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b02      	cmp	r3, #2
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e164      	b.n	8001850 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001586:	4b26      	ldr	r3, [pc, #152]	; (8001620 <HAL_RCC_OscConfig+0x2ac>)
 8001588:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	2b00      	cmp	r3, #0
 8001590:	d0f0      	beq.n	8001574 <HAL_RCC_OscConfig+0x200>
 8001592:	e015      	b.n	80015c0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001594:	4b24      	ldr	r3, [pc, #144]	; (8001628 <HAL_RCC_OscConfig+0x2b4>)
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800159a:	f7ff fb79 	bl	8000c90 <HAL_GetTick>
 800159e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015a0:	e008      	b.n	80015b4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015a2:	f7ff fb75 	bl	8000c90 <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d901      	bls.n	80015b4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e14d      	b.n	8001850 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015b4:	4b1a      	ldr	r3, [pc, #104]	; (8001620 <HAL_RCC_OscConfig+0x2ac>)
 80015b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015b8:	f003 0302 	and.w	r3, r3, #2
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1f0      	bne.n	80015a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0304 	and.w	r3, r3, #4
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	f000 80a0 	beq.w	800170e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015ce:	2300      	movs	r3, #0
 80015d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015d2:	4b13      	ldr	r3, [pc, #76]	; (8001620 <HAL_RCC_OscConfig+0x2ac>)
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d10f      	bne.n	80015fe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	60bb      	str	r3, [r7, #8]
 80015e2:	4b0f      	ldr	r3, [pc, #60]	; (8001620 <HAL_RCC_OscConfig+0x2ac>)
 80015e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e6:	4a0e      	ldr	r2, [pc, #56]	; (8001620 <HAL_RCC_OscConfig+0x2ac>)
 80015e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ec:	6413      	str	r3, [r2, #64]	; 0x40
 80015ee:	4b0c      	ldr	r3, [pc, #48]	; (8001620 <HAL_RCC_OscConfig+0x2ac>)
 80015f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f6:	60bb      	str	r3, [r7, #8]
 80015f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015fa:	2301      	movs	r3, #1
 80015fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015fe:	4b0b      	ldr	r3, [pc, #44]	; (800162c <HAL_RCC_OscConfig+0x2b8>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001606:	2b00      	cmp	r3, #0
 8001608:	d121      	bne.n	800164e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800160a:	4b08      	ldr	r3, [pc, #32]	; (800162c <HAL_RCC_OscConfig+0x2b8>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a07      	ldr	r2, [pc, #28]	; (800162c <HAL_RCC_OscConfig+0x2b8>)
 8001610:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001614:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001616:	f7ff fb3b 	bl	8000c90 <HAL_GetTick>
 800161a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800161c:	e011      	b.n	8001642 <HAL_RCC_OscConfig+0x2ce>
 800161e:	bf00      	nop
 8001620:	40023800 	.word	0x40023800
 8001624:	42470000 	.word	0x42470000
 8001628:	42470e80 	.word	0x42470e80
 800162c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001630:	f7ff fb2e 	bl	8000c90 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b02      	cmp	r3, #2
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e106      	b.n	8001850 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001642:	4b85      	ldr	r3, [pc, #532]	; (8001858 <HAL_RCC_OscConfig+0x4e4>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800164a:	2b00      	cmp	r3, #0
 800164c:	d0f0      	beq.n	8001630 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	2b01      	cmp	r3, #1
 8001654:	d106      	bne.n	8001664 <HAL_RCC_OscConfig+0x2f0>
 8001656:	4b81      	ldr	r3, [pc, #516]	; (800185c <HAL_RCC_OscConfig+0x4e8>)
 8001658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800165a:	4a80      	ldr	r2, [pc, #512]	; (800185c <HAL_RCC_OscConfig+0x4e8>)
 800165c:	f043 0301 	orr.w	r3, r3, #1
 8001660:	6713      	str	r3, [r2, #112]	; 0x70
 8001662:	e01c      	b.n	800169e <HAL_RCC_OscConfig+0x32a>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	2b05      	cmp	r3, #5
 800166a:	d10c      	bne.n	8001686 <HAL_RCC_OscConfig+0x312>
 800166c:	4b7b      	ldr	r3, [pc, #492]	; (800185c <HAL_RCC_OscConfig+0x4e8>)
 800166e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001670:	4a7a      	ldr	r2, [pc, #488]	; (800185c <HAL_RCC_OscConfig+0x4e8>)
 8001672:	f043 0304 	orr.w	r3, r3, #4
 8001676:	6713      	str	r3, [r2, #112]	; 0x70
 8001678:	4b78      	ldr	r3, [pc, #480]	; (800185c <HAL_RCC_OscConfig+0x4e8>)
 800167a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800167c:	4a77      	ldr	r2, [pc, #476]	; (800185c <HAL_RCC_OscConfig+0x4e8>)
 800167e:	f043 0301 	orr.w	r3, r3, #1
 8001682:	6713      	str	r3, [r2, #112]	; 0x70
 8001684:	e00b      	b.n	800169e <HAL_RCC_OscConfig+0x32a>
 8001686:	4b75      	ldr	r3, [pc, #468]	; (800185c <HAL_RCC_OscConfig+0x4e8>)
 8001688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800168a:	4a74      	ldr	r2, [pc, #464]	; (800185c <HAL_RCC_OscConfig+0x4e8>)
 800168c:	f023 0301 	bic.w	r3, r3, #1
 8001690:	6713      	str	r3, [r2, #112]	; 0x70
 8001692:	4b72      	ldr	r3, [pc, #456]	; (800185c <HAL_RCC_OscConfig+0x4e8>)
 8001694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001696:	4a71      	ldr	r2, [pc, #452]	; (800185c <HAL_RCC_OscConfig+0x4e8>)
 8001698:	f023 0304 	bic.w	r3, r3, #4
 800169c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d015      	beq.n	80016d2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016a6:	f7ff faf3 	bl	8000c90 <HAL_GetTick>
 80016aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016ac:	e00a      	b.n	80016c4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016ae:	f7ff faef 	bl	8000c90 <HAL_GetTick>
 80016b2:	4602      	mov	r2, r0
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80016bc:	4293      	cmp	r3, r2
 80016be:	d901      	bls.n	80016c4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80016c0:	2303      	movs	r3, #3
 80016c2:	e0c5      	b.n	8001850 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016c4:	4b65      	ldr	r3, [pc, #404]	; (800185c <HAL_RCC_OscConfig+0x4e8>)
 80016c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016c8:	f003 0302 	and.w	r3, r3, #2
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d0ee      	beq.n	80016ae <HAL_RCC_OscConfig+0x33a>
 80016d0:	e014      	b.n	80016fc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016d2:	f7ff fadd 	bl	8000c90 <HAL_GetTick>
 80016d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016d8:	e00a      	b.n	80016f0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016da:	f7ff fad9 	bl	8000c90 <HAL_GetTick>
 80016de:	4602      	mov	r2, r0
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d901      	bls.n	80016f0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e0af      	b.n	8001850 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016f0:	4b5a      	ldr	r3, [pc, #360]	; (800185c <HAL_RCC_OscConfig+0x4e8>)
 80016f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016f4:	f003 0302 	and.w	r3, r3, #2
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d1ee      	bne.n	80016da <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016fc:	7dfb      	ldrb	r3, [r7, #23]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d105      	bne.n	800170e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001702:	4b56      	ldr	r3, [pc, #344]	; (800185c <HAL_RCC_OscConfig+0x4e8>)
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	4a55      	ldr	r2, [pc, #340]	; (800185c <HAL_RCC_OscConfig+0x4e8>)
 8001708:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800170c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	699b      	ldr	r3, [r3, #24]
 8001712:	2b00      	cmp	r3, #0
 8001714:	f000 809b 	beq.w	800184e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001718:	4b50      	ldr	r3, [pc, #320]	; (800185c <HAL_RCC_OscConfig+0x4e8>)
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	f003 030c 	and.w	r3, r3, #12
 8001720:	2b08      	cmp	r3, #8
 8001722:	d05c      	beq.n	80017de <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	699b      	ldr	r3, [r3, #24]
 8001728:	2b02      	cmp	r3, #2
 800172a:	d141      	bne.n	80017b0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800172c:	4b4c      	ldr	r3, [pc, #304]	; (8001860 <HAL_RCC_OscConfig+0x4ec>)
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001732:	f7ff faad 	bl	8000c90 <HAL_GetTick>
 8001736:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001738:	e008      	b.n	800174c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800173a:	f7ff faa9 	bl	8000c90 <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	2b02      	cmp	r3, #2
 8001746:	d901      	bls.n	800174c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	e081      	b.n	8001850 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800174c:	4b43      	ldr	r3, [pc, #268]	; (800185c <HAL_RCC_OscConfig+0x4e8>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d1f0      	bne.n	800173a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	69da      	ldr	r2, [r3, #28]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6a1b      	ldr	r3, [r3, #32]
 8001760:	431a      	orrs	r2, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001766:	019b      	lsls	r3, r3, #6
 8001768:	431a      	orrs	r2, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800176e:	085b      	lsrs	r3, r3, #1
 8001770:	3b01      	subs	r3, #1
 8001772:	041b      	lsls	r3, r3, #16
 8001774:	431a      	orrs	r2, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800177a:	061b      	lsls	r3, r3, #24
 800177c:	4937      	ldr	r1, [pc, #220]	; (800185c <HAL_RCC_OscConfig+0x4e8>)
 800177e:	4313      	orrs	r3, r2
 8001780:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001782:	4b37      	ldr	r3, [pc, #220]	; (8001860 <HAL_RCC_OscConfig+0x4ec>)
 8001784:	2201      	movs	r2, #1
 8001786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001788:	f7ff fa82 	bl	8000c90 <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800178e:	e008      	b.n	80017a2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001790:	f7ff fa7e 	bl	8000c90 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b02      	cmp	r3, #2
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e056      	b.n	8001850 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017a2:	4b2e      	ldr	r3, [pc, #184]	; (800185c <HAL_RCC_OscConfig+0x4e8>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d0f0      	beq.n	8001790 <HAL_RCC_OscConfig+0x41c>
 80017ae:	e04e      	b.n	800184e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017b0:	4b2b      	ldr	r3, [pc, #172]	; (8001860 <HAL_RCC_OscConfig+0x4ec>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b6:	f7ff fa6b 	bl	8000c90 <HAL_GetTick>
 80017ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017bc:	e008      	b.n	80017d0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017be:	f7ff fa67 	bl	8000c90 <HAL_GetTick>
 80017c2:	4602      	mov	r2, r0
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d901      	bls.n	80017d0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e03f      	b.n	8001850 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017d0:	4b22      	ldr	r3, [pc, #136]	; (800185c <HAL_RCC_OscConfig+0x4e8>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d1f0      	bne.n	80017be <HAL_RCC_OscConfig+0x44a>
 80017dc:	e037      	b.n	800184e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	699b      	ldr	r3, [r3, #24]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d101      	bne.n	80017ea <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e032      	b.n	8001850 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80017ea:	4b1c      	ldr	r3, [pc, #112]	; (800185c <HAL_RCC_OscConfig+0x4e8>)
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d028      	beq.n	800184a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001802:	429a      	cmp	r2, r3
 8001804:	d121      	bne.n	800184a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001810:	429a      	cmp	r2, r3
 8001812:	d11a      	bne.n	800184a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001814:	68fa      	ldr	r2, [r7, #12]
 8001816:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800181a:	4013      	ands	r3, r2
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001820:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001822:	4293      	cmp	r3, r2
 8001824:	d111      	bne.n	800184a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001830:	085b      	lsrs	r3, r3, #1
 8001832:	3b01      	subs	r3, #1
 8001834:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001836:	429a      	cmp	r2, r3
 8001838:	d107      	bne.n	800184a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001844:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001846:	429a      	cmp	r2, r3
 8001848:	d001      	beq.n	800184e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e000      	b.n	8001850 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800184e:	2300      	movs	r3, #0
}
 8001850:	4618      	mov	r0, r3
 8001852:	3718      	adds	r7, #24
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	40007000 	.word	0x40007000
 800185c:	40023800 	.word	0x40023800
 8001860:	42470060 	.word	0x42470060

08001864 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d101      	bne.n	8001878 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e0cc      	b.n	8001a12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001878:	4b68      	ldr	r3, [pc, #416]	; (8001a1c <HAL_RCC_ClockConfig+0x1b8>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0307 	and.w	r3, r3, #7
 8001880:	683a      	ldr	r2, [r7, #0]
 8001882:	429a      	cmp	r2, r3
 8001884:	d90c      	bls.n	80018a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001886:	4b65      	ldr	r3, [pc, #404]	; (8001a1c <HAL_RCC_ClockConfig+0x1b8>)
 8001888:	683a      	ldr	r2, [r7, #0]
 800188a:	b2d2      	uxtb	r2, r2
 800188c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800188e:	4b63      	ldr	r3, [pc, #396]	; (8001a1c <HAL_RCC_ClockConfig+0x1b8>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0307 	and.w	r3, r3, #7
 8001896:	683a      	ldr	r2, [r7, #0]
 8001898:	429a      	cmp	r2, r3
 800189a:	d001      	beq.n	80018a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e0b8      	b.n	8001a12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0302 	and.w	r3, r3, #2
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d020      	beq.n	80018ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0304 	and.w	r3, r3, #4
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d005      	beq.n	80018c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018b8:	4b59      	ldr	r3, [pc, #356]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	4a58      	ldr	r2, [pc, #352]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 80018be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0308 	and.w	r3, r3, #8
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d005      	beq.n	80018dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018d0:	4b53      	ldr	r3, [pc, #332]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	4a52      	ldr	r2, [pc, #328]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 80018d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018dc:	4b50      	ldr	r3, [pc, #320]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	494d      	ldr	r1, [pc, #308]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 80018ea:	4313      	orrs	r3, r2
 80018ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d044      	beq.n	8001984 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d107      	bne.n	8001912 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001902:	4b47      	ldr	r3, [pc, #284]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d119      	bne.n	8001942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e07f      	b.n	8001a12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	2b02      	cmp	r3, #2
 8001918:	d003      	beq.n	8001922 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800191e:	2b03      	cmp	r3, #3
 8001920:	d107      	bne.n	8001932 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001922:	4b3f      	ldr	r3, [pc, #252]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d109      	bne.n	8001942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e06f      	b.n	8001a12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001932:	4b3b      	ldr	r3, [pc, #236]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d101      	bne.n	8001942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e067      	b.n	8001a12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001942:	4b37      	ldr	r3, [pc, #220]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	f023 0203 	bic.w	r2, r3, #3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	4934      	ldr	r1, [pc, #208]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 8001950:	4313      	orrs	r3, r2
 8001952:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001954:	f7ff f99c 	bl	8000c90 <HAL_GetTick>
 8001958:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800195a:	e00a      	b.n	8001972 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800195c:	f7ff f998 	bl	8000c90 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	f241 3288 	movw	r2, #5000	; 0x1388
 800196a:	4293      	cmp	r3, r2
 800196c:	d901      	bls.n	8001972 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e04f      	b.n	8001a12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001972:	4b2b      	ldr	r3, [pc, #172]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f003 020c 	and.w	r2, r3, #12
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	429a      	cmp	r2, r3
 8001982:	d1eb      	bne.n	800195c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001984:	4b25      	ldr	r3, [pc, #148]	; (8001a1c <HAL_RCC_ClockConfig+0x1b8>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0307 	and.w	r3, r3, #7
 800198c:	683a      	ldr	r2, [r7, #0]
 800198e:	429a      	cmp	r2, r3
 8001990:	d20c      	bcs.n	80019ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001992:	4b22      	ldr	r3, [pc, #136]	; (8001a1c <HAL_RCC_ClockConfig+0x1b8>)
 8001994:	683a      	ldr	r2, [r7, #0]
 8001996:	b2d2      	uxtb	r2, r2
 8001998:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800199a:	4b20      	ldr	r3, [pc, #128]	; (8001a1c <HAL_RCC_ClockConfig+0x1b8>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0307 	and.w	r3, r3, #7
 80019a2:	683a      	ldr	r2, [r7, #0]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d001      	beq.n	80019ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e032      	b.n	8001a12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0304 	and.w	r3, r3, #4
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d008      	beq.n	80019ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019b8:	4b19      	ldr	r3, [pc, #100]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	4916      	ldr	r1, [pc, #88]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 80019c6:	4313      	orrs	r3, r2
 80019c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0308 	and.w	r3, r3, #8
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d009      	beq.n	80019ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019d6:	4b12      	ldr	r3, [pc, #72]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	691b      	ldr	r3, [r3, #16]
 80019e2:	00db      	lsls	r3, r3, #3
 80019e4:	490e      	ldr	r1, [pc, #56]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 80019e6:	4313      	orrs	r3, r2
 80019e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019ea:	f000 f821 	bl	8001a30 <HAL_RCC_GetSysClockFreq>
 80019ee:	4602      	mov	r2, r0
 80019f0:	4b0b      	ldr	r3, [pc, #44]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	091b      	lsrs	r3, r3, #4
 80019f6:	f003 030f 	and.w	r3, r3, #15
 80019fa:	490a      	ldr	r1, [pc, #40]	; (8001a24 <HAL_RCC_ClockConfig+0x1c0>)
 80019fc:	5ccb      	ldrb	r3, [r1, r3]
 80019fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001a02:	4a09      	ldr	r2, [pc, #36]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 8001a04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a06:	4b09      	ldr	r3, [pc, #36]	; (8001a2c <HAL_RCC_ClockConfig+0x1c8>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff f8fc 	bl	8000c08 <HAL_InitTick>

  return HAL_OK;
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3710      	adds	r7, #16
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40023c00 	.word	0x40023c00
 8001a20:	40023800 	.word	0x40023800
 8001a24:	08003628 	.word	0x08003628
 8001a28:	2000000c 	.word	0x2000000c
 8001a2c:	20000010 	.word	0x20000010

08001a30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a30:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a34:	b084      	sub	sp, #16
 8001a36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	607b      	str	r3, [r7, #4]
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	2300      	movs	r3, #0
 8001a42:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001a44:	2300      	movs	r3, #0
 8001a46:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a48:	4b67      	ldr	r3, [pc, #412]	; (8001be8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f003 030c 	and.w	r3, r3, #12
 8001a50:	2b08      	cmp	r3, #8
 8001a52:	d00d      	beq.n	8001a70 <HAL_RCC_GetSysClockFreq+0x40>
 8001a54:	2b08      	cmp	r3, #8
 8001a56:	f200 80bd 	bhi.w	8001bd4 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d002      	beq.n	8001a64 <HAL_RCC_GetSysClockFreq+0x34>
 8001a5e:	2b04      	cmp	r3, #4
 8001a60:	d003      	beq.n	8001a6a <HAL_RCC_GetSysClockFreq+0x3a>
 8001a62:	e0b7      	b.n	8001bd4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a64:	4b61      	ldr	r3, [pc, #388]	; (8001bec <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001a66:	60bb      	str	r3, [r7, #8]
       break;
 8001a68:	e0b7      	b.n	8001bda <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a6a:	4b61      	ldr	r3, [pc, #388]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001a6c:	60bb      	str	r3, [r7, #8]
      break;
 8001a6e:	e0b4      	b.n	8001bda <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a70:	4b5d      	ldr	r3, [pc, #372]	; (8001be8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a78:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a7a:	4b5b      	ldr	r3, [pc, #364]	; (8001be8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d04d      	beq.n	8001b22 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a86:	4b58      	ldr	r3, [pc, #352]	; (8001be8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	099b      	lsrs	r3, r3, #6
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	f04f 0300 	mov.w	r3, #0
 8001a92:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001a96:	f04f 0100 	mov.w	r1, #0
 8001a9a:	ea02 0800 	and.w	r8, r2, r0
 8001a9e:	ea03 0901 	and.w	r9, r3, r1
 8001aa2:	4640      	mov	r0, r8
 8001aa4:	4649      	mov	r1, r9
 8001aa6:	f04f 0200 	mov.w	r2, #0
 8001aaa:	f04f 0300 	mov.w	r3, #0
 8001aae:	014b      	lsls	r3, r1, #5
 8001ab0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001ab4:	0142      	lsls	r2, r0, #5
 8001ab6:	4610      	mov	r0, r2
 8001ab8:	4619      	mov	r1, r3
 8001aba:	ebb0 0008 	subs.w	r0, r0, r8
 8001abe:	eb61 0109 	sbc.w	r1, r1, r9
 8001ac2:	f04f 0200 	mov.w	r2, #0
 8001ac6:	f04f 0300 	mov.w	r3, #0
 8001aca:	018b      	lsls	r3, r1, #6
 8001acc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001ad0:	0182      	lsls	r2, r0, #6
 8001ad2:	1a12      	subs	r2, r2, r0
 8001ad4:	eb63 0301 	sbc.w	r3, r3, r1
 8001ad8:	f04f 0000 	mov.w	r0, #0
 8001adc:	f04f 0100 	mov.w	r1, #0
 8001ae0:	00d9      	lsls	r1, r3, #3
 8001ae2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001ae6:	00d0      	lsls	r0, r2, #3
 8001ae8:	4602      	mov	r2, r0
 8001aea:	460b      	mov	r3, r1
 8001aec:	eb12 0208 	adds.w	r2, r2, r8
 8001af0:	eb43 0309 	adc.w	r3, r3, r9
 8001af4:	f04f 0000 	mov.w	r0, #0
 8001af8:	f04f 0100 	mov.w	r1, #0
 8001afc:	0259      	lsls	r1, r3, #9
 8001afe:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001b02:	0250      	lsls	r0, r2, #9
 8001b04:	4602      	mov	r2, r0
 8001b06:	460b      	mov	r3, r1
 8001b08:	4610      	mov	r0, r2
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	461a      	mov	r2, r3
 8001b10:	f04f 0300 	mov.w	r3, #0
 8001b14:	f7fe fb60 	bl	80001d8 <__aeabi_uldivmod>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	60fb      	str	r3, [r7, #12]
 8001b20:	e04a      	b.n	8001bb8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b22:	4b31      	ldr	r3, [pc, #196]	; (8001be8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	099b      	lsrs	r3, r3, #6
 8001b28:	461a      	mov	r2, r3
 8001b2a:	f04f 0300 	mov.w	r3, #0
 8001b2e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001b32:	f04f 0100 	mov.w	r1, #0
 8001b36:	ea02 0400 	and.w	r4, r2, r0
 8001b3a:	ea03 0501 	and.w	r5, r3, r1
 8001b3e:	4620      	mov	r0, r4
 8001b40:	4629      	mov	r1, r5
 8001b42:	f04f 0200 	mov.w	r2, #0
 8001b46:	f04f 0300 	mov.w	r3, #0
 8001b4a:	014b      	lsls	r3, r1, #5
 8001b4c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001b50:	0142      	lsls	r2, r0, #5
 8001b52:	4610      	mov	r0, r2
 8001b54:	4619      	mov	r1, r3
 8001b56:	1b00      	subs	r0, r0, r4
 8001b58:	eb61 0105 	sbc.w	r1, r1, r5
 8001b5c:	f04f 0200 	mov.w	r2, #0
 8001b60:	f04f 0300 	mov.w	r3, #0
 8001b64:	018b      	lsls	r3, r1, #6
 8001b66:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001b6a:	0182      	lsls	r2, r0, #6
 8001b6c:	1a12      	subs	r2, r2, r0
 8001b6e:	eb63 0301 	sbc.w	r3, r3, r1
 8001b72:	f04f 0000 	mov.w	r0, #0
 8001b76:	f04f 0100 	mov.w	r1, #0
 8001b7a:	00d9      	lsls	r1, r3, #3
 8001b7c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001b80:	00d0      	lsls	r0, r2, #3
 8001b82:	4602      	mov	r2, r0
 8001b84:	460b      	mov	r3, r1
 8001b86:	1912      	adds	r2, r2, r4
 8001b88:	eb45 0303 	adc.w	r3, r5, r3
 8001b8c:	f04f 0000 	mov.w	r0, #0
 8001b90:	f04f 0100 	mov.w	r1, #0
 8001b94:	0299      	lsls	r1, r3, #10
 8001b96:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001b9a:	0290      	lsls	r0, r2, #10
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	4610      	mov	r0, r2
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	f04f 0300 	mov.w	r3, #0
 8001bac:	f7fe fb14 	bl	80001d8 <__aeabi_uldivmod>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001bb8:	4b0b      	ldr	r3, [pc, #44]	; (8001be8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	0c1b      	lsrs	r3, r3, #16
 8001bbe:	f003 0303 	and.w	r3, r3, #3
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001bc8:	68fa      	ldr	r2, [r7, #12]
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bd0:	60bb      	str	r3, [r7, #8]
      break;
 8001bd2:	e002      	b.n	8001bda <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bd4:	4b05      	ldr	r3, [pc, #20]	; (8001bec <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001bd6:	60bb      	str	r3, [r7, #8]
      break;
 8001bd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bda:	68bb      	ldr	r3, [r7, #8]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3710      	adds	r7, #16
 8001be0:	46bd      	mov	sp, r7
 8001be2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001be6:	bf00      	nop
 8001be8:	40023800 	.word	0x40023800
 8001bec:	00f42400 	.word	0x00f42400
 8001bf0:	007a1200 	.word	0x007a1200

08001bf4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bf8:	4b03      	ldr	r3, [pc, #12]	; (8001c08 <HAL_RCC_GetHCLKFreq+0x14>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	2000000c 	.word	0x2000000c

08001c0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c10:	f7ff fff0 	bl	8001bf4 <HAL_RCC_GetHCLKFreq>
 8001c14:	4602      	mov	r2, r0
 8001c16:	4b05      	ldr	r3, [pc, #20]	; (8001c2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	0a9b      	lsrs	r3, r3, #10
 8001c1c:	f003 0307 	and.w	r3, r3, #7
 8001c20:	4903      	ldr	r1, [pc, #12]	; (8001c30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c22:	5ccb      	ldrb	r3, [r1, r3]
 8001c24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40023800 	.word	0x40023800
 8001c30:	08003638 	.word	0x08003638

08001c34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c38:	f7ff ffdc 	bl	8001bf4 <HAL_RCC_GetHCLKFreq>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	4b05      	ldr	r3, [pc, #20]	; (8001c54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	0b5b      	lsrs	r3, r3, #13
 8001c44:	f003 0307 	and.w	r3, r3, #7
 8001c48:	4903      	ldr	r1, [pc, #12]	; (8001c58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c4a:	5ccb      	ldrb	r3, [r1, r3]
 8001c4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40023800 	.word	0x40023800
 8001c58:	08003638 	.word	0x08003638

08001c5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d101      	bne.n	8001c6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e041      	b.n	8001cf2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d106      	bne.n	8001c88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f7fe fe46 	bl	8000914 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2202      	movs	r2, #2
 8001c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	3304      	adds	r3, #4
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4610      	mov	r0, r2
 8001c9c:	f000 fa10 	bl	80020c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2201      	movs	r2, #1
 8001cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b082      	sub	sp, #8
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d101      	bne.n	8001d0c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e041      	b.n	8001d90 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d106      	bne.n	8001d26 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f000 f839 	bl	8001d98 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2202      	movs	r2, #2
 8001d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	3304      	adds	r3, #4
 8001d36:	4619      	mov	r1, r3
 8001d38:	4610      	mov	r0, r2
 8001d3a:	f000 f9c1 	bl	80020c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2201      	movs	r2, #1
 8001d42:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2201      	movs	r2, #1
 8001d4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2201      	movs	r2, #1
 8001d52:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2201      	movs	r2, #1
 8001d5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2201      	movs	r2, #1
 8001d62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2201      	movs	r2, #1
 8001d6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2201      	movs	r2, #1
 8001d72:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2201      	movs	r2, #1
 8001d7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2201      	movs	r2, #1
 8001d82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2201      	movs	r2, #1
 8001d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d8e:	2300      	movs	r3, #0
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3708      	adds	r7, #8
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001db8:	2300      	movs	r3, #0
 8001dba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d101      	bne.n	8001dca <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	e0ae      	b.n	8001f28 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2201      	movs	r2, #1
 8001dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2b0c      	cmp	r3, #12
 8001dd6:	f200 809f 	bhi.w	8001f18 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001dda:	a201      	add	r2, pc, #4	; (adr r2, 8001de0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001de0:	08001e15 	.word	0x08001e15
 8001de4:	08001f19 	.word	0x08001f19
 8001de8:	08001f19 	.word	0x08001f19
 8001dec:	08001f19 	.word	0x08001f19
 8001df0:	08001e55 	.word	0x08001e55
 8001df4:	08001f19 	.word	0x08001f19
 8001df8:	08001f19 	.word	0x08001f19
 8001dfc:	08001f19 	.word	0x08001f19
 8001e00:	08001e97 	.word	0x08001e97
 8001e04:	08001f19 	.word	0x08001f19
 8001e08:	08001f19 	.word	0x08001f19
 8001e0c:	08001f19 	.word	0x08001f19
 8001e10:	08001ed7 	.word	0x08001ed7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	68b9      	ldr	r1, [r7, #8]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f000 f9d0 	bl	80021c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	699a      	ldr	r2, [r3, #24]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f042 0208 	orr.w	r2, r2, #8
 8001e2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	699a      	ldr	r2, [r3, #24]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f022 0204 	bic.w	r2, r2, #4
 8001e3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	6999      	ldr	r1, [r3, #24]
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	691a      	ldr	r2, [r3, #16]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	430a      	orrs	r2, r1
 8001e50:	619a      	str	r2, [r3, #24]
      break;
 8001e52:	e064      	b.n	8001f1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	68b9      	ldr	r1, [r7, #8]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f000 fa16 	bl	800228c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	699a      	ldr	r2, [r3, #24]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	699a      	ldr	r2, [r3, #24]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	6999      	ldr	r1, [r3, #24]
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	021a      	lsls	r2, r3, #8
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	430a      	orrs	r2, r1
 8001e92:	619a      	str	r2, [r3, #24]
      break;
 8001e94:	e043      	b.n	8001f1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	68b9      	ldr	r1, [r7, #8]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f000 fa61 	bl	8002364 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	69da      	ldr	r2, [r3, #28]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f042 0208 	orr.w	r2, r2, #8
 8001eb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	69da      	ldr	r2, [r3, #28]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f022 0204 	bic.w	r2, r2, #4
 8001ec0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	69d9      	ldr	r1, [r3, #28]
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	691a      	ldr	r2, [r3, #16]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	61da      	str	r2, [r3, #28]
      break;
 8001ed4:	e023      	b.n	8001f1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	68b9      	ldr	r1, [r7, #8]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f000 faab 	bl	8002438 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	69da      	ldr	r2, [r3, #28]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ef0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	69da      	ldr	r2, [r3, #28]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	69d9      	ldr	r1, [r3, #28]
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	691b      	ldr	r3, [r3, #16]
 8001f0c:	021a      	lsls	r2, r3, #8
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	430a      	orrs	r2, r1
 8001f14:	61da      	str	r2, [r3, #28]
      break;
 8001f16:	e002      	b.n	8001f1e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	75fb      	strb	r3, [r7, #23]
      break;
 8001f1c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001f26:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3718      	adds	r7, #24
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d101      	bne.n	8001f4c <HAL_TIM_ConfigClockSource+0x1c>
 8001f48:	2302      	movs	r3, #2
 8001f4a:	e0b4      	b.n	80020b6 <HAL_TIM_ConfigClockSource+0x186>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2202      	movs	r2, #2
 8001f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001f6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001f72:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	68ba      	ldr	r2, [r7, #8]
 8001f7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f84:	d03e      	beq.n	8002004 <HAL_TIM_ConfigClockSource+0xd4>
 8001f86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f8a:	f200 8087 	bhi.w	800209c <HAL_TIM_ConfigClockSource+0x16c>
 8001f8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f92:	f000 8086 	beq.w	80020a2 <HAL_TIM_ConfigClockSource+0x172>
 8001f96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f9a:	d87f      	bhi.n	800209c <HAL_TIM_ConfigClockSource+0x16c>
 8001f9c:	2b70      	cmp	r3, #112	; 0x70
 8001f9e:	d01a      	beq.n	8001fd6 <HAL_TIM_ConfigClockSource+0xa6>
 8001fa0:	2b70      	cmp	r3, #112	; 0x70
 8001fa2:	d87b      	bhi.n	800209c <HAL_TIM_ConfigClockSource+0x16c>
 8001fa4:	2b60      	cmp	r3, #96	; 0x60
 8001fa6:	d050      	beq.n	800204a <HAL_TIM_ConfigClockSource+0x11a>
 8001fa8:	2b60      	cmp	r3, #96	; 0x60
 8001faa:	d877      	bhi.n	800209c <HAL_TIM_ConfigClockSource+0x16c>
 8001fac:	2b50      	cmp	r3, #80	; 0x50
 8001fae:	d03c      	beq.n	800202a <HAL_TIM_ConfigClockSource+0xfa>
 8001fb0:	2b50      	cmp	r3, #80	; 0x50
 8001fb2:	d873      	bhi.n	800209c <HAL_TIM_ConfigClockSource+0x16c>
 8001fb4:	2b40      	cmp	r3, #64	; 0x40
 8001fb6:	d058      	beq.n	800206a <HAL_TIM_ConfigClockSource+0x13a>
 8001fb8:	2b40      	cmp	r3, #64	; 0x40
 8001fba:	d86f      	bhi.n	800209c <HAL_TIM_ConfigClockSource+0x16c>
 8001fbc:	2b30      	cmp	r3, #48	; 0x30
 8001fbe:	d064      	beq.n	800208a <HAL_TIM_ConfigClockSource+0x15a>
 8001fc0:	2b30      	cmp	r3, #48	; 0x30
 8001fc2:	d86b      	bhi.n	800209c <HAL_TIM_ConfigClockSource+0x16c>
 8001fc4:	2b20      	cmp	r3, #32
 8001fc6:	d060      	beq.n	800208a <HAL_TIM_ConfigClockSource+0x15a>
 8001fc8:	2b20      	cmp	r3, #32
 8001fca:	d867      	bhi.n	800209c <HAL_TIM_ConfigClockSource+0x16c>
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d05c      	beq.n	800208a <HAL_TIM_ConfigClockSource+0x15a>
 8001fd0:	2b10      	cmp	r3, #16
 8001fd2:	d05a      	beq.n	800208a <HAL_TIM_ConfigClockSource+0x15a>
 8001fd4:	e062      	b.n	800209c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6818      	ldr	r0, [r3, #0]
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	6899      	ldr	r1, [r3, #8]
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685a      	ldr	r2, [r3, #4]
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	f000 faf1 	bl	80025cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001ff8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	68ba      	ldr	r2, [r7, #8]
 8002000:	609a      	str	r2, [r3, #8]
      break;
 8002002:	e04f      	b.n	80020a4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6818      	ldr	r0, [r3, #0]
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	6899      	ldr	r1, [r3, #8]
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685a      	ldr	r2, [r3, #4]
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	f000 fada 	bl	80025cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	689a      	ldr	r2, [r3, #8]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002026:	609a      	str	r2, [r3, #8]
      break;
 8002028:	e03c      	b.n	80020a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6818      	ldr	r0, [r3, #0]
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	6859      	ldr	r1, [r3, #4]
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	461a      	mov	r2, r3
 8002038:	f000 fa4e 	bl	80024d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2150      	movs	r1, #80	; 0x50
 8002042:	4618      	mov	r0, r3
 8002044:	f000 faa7 	bl	8002596 <TIM_ITRx_SetConfig>
      break;
 8002048:	e02c      	b.n	80020a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6818      	ldr	r0, [r3, #0]
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	6859      	ldr	r1, [r3, #4]
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	461a      	mov	r2, r3
 8002058:	f000 fa6d 	bl	8002536 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2160      	movs	r1, #96	; 0x60
 8002062:	4618      	mov	r0, r3
 8002064:	f000 fa97 	bl	8002596 <TIM_ITRx_SetConfig>
      break;
 8002068:	e01c      	b.n	80020a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6818      	ldr	r0, [r3, #0]
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	6859      	ldr	r1, [r3, #4]
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	461a      	mov	r2, r3
 8002078:	f000 fa2e 	bl	80024d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2140      	movs	r1, #64	; 0x40
 8002082:	4618      	mov	r0, r3
 8002084:	f000 fa87 	bl	8002596 <TIM_ITRx_SetConfig>
      break;
 8002088:	e00c      	b.n	80020a4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4619      	mov	r1, r3
 8002094:	4610      	mov	r0, r2
 8002096:	f000 fa7e 	bl	8002596 <TIM_ITRx_SetConfig>
      break;
 800209a:	e003      	b.n	80020a4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	73fb      	strb	r3, [r7, #15]
      break;
 80020a0:	e000      	b.n	80020a4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80020a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2201      	movs	r2, #1
 80020a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80020b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3710      	adds	r7, #16
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
	...

080020c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4a34      	ldr	r2, [pc, #208]	; (80021a4 <TIM_Base_SetConfig+0xe4>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d00f      	beq.n	80020f8 <TIM_Base_SetConfig+0x38>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020de:	d00b      	beq.n	80020f8 <TIM_Base_SetConfig+0x38>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	4a31      	ldr	r2, [pc, #196]	; (80021a8 <TIM_Base_SetConfig+0xe8>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d007      	beq.n	80020f8 <TIM_Base_SetConfig+0x38>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4a30      	ldr	r2, [pc, #192]	; (80021ac <TIM_Base_SetConfig+0xec>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d003      	beq.n	80020f8 <TIM_Base_SetConfig+0x38>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4a2f      	ldr	r2, [pc, #188]	; (80021b0 <TIM_Base_SetConfig+0xf0>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d108      	bne.n	800210a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	68fa      	ldr	r2, [r7, #12]
 8002106:	4313      	orrs	r3, r2
 8002108:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a25      	ldr	r2, [pc, #148]	; (80021a4 <TIM_Base_SetConfig+0xe4>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d01b      	beq.n	800214a <TIM_Base_SetConfig+0x8a>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002118:	d017      	beq.n	800214a <TIM_Base_SetConfig+0x8a>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a22      	ldr	r2, [pc, #136]	; (80021a8 <TIM_Base_SetConfig+0xe8>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d013      	beq.n	800214a <TIM_Base_SetConfig+0x8a>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a21      	ldr	r2, [pc, #132]	; (80021ac <TIM_Base_SetConfig+0xec>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d00f      	beq.n	800214a <TIM_Base_SetConfig+0x8a>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a20      	ldr	r2, [pc, #128]	; (80021b0 <TIM_Base_SetConfig+0xf0>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d00b      	beq.n	800214a <TIM_Base_SetConfig+0x8a>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a1f      	ldr	r2, [pc, #124]	; (80021b4 <TIM_Base_SetConfig+0xf4>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d007      	beq.n	800214a <TIM_Base_SetConfig+0x8a>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a1e      	ldr	r2, [pc, #120]	; (80021b8 <TIM_Base_SetConfig+0xf8>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d003      	beq.n	800214a <TIM_Base_SetConfig+0x8a>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a1d      	ldr	r2, [pc, #116]	; (80021bc <TIM_Base_SetConfig+0xfc>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d108      	bne.n	800215c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002150:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	68fa      	ldr	r2, [r7, #12]
 8002158:	4313      	orrs	r3, r2
 800215a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	695b      	ldr	r3, [r3, #20]
 8002166:	4313      	orrs	r3, r2
 8002168:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	68fa      	ldr	r2, [r7, #12]
 800216e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	689a      	ldr	r2, [r3, #8]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a08      	ldr	r2, [pc, #32]	; (80021a4 <TIM_Base_SetConfig+0xe4>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d103      	bne.n	8002190 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	691a      	ldr	r2, [r3, #16]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	615a      	str	r2, [r3, #20]
}
 8002196:	bf00      	nop
 8002198:	3714      	adds	r7, #20
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	40010000 	.word	0x40010000
 80021a8:	40000400 	.word	0x40000400
 80021ac:	40000800 	.word	0x40000800
 80021b0:	40000c00 	.word	0x40000c00
 80021b4:	40014000 	.word	0x40014000
 80021b8:	40014400 	.word	0x40014400
 80021bc:	40014800 	.word	0x40014800

080021c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b087      	sub	sp, #28
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a1b      	ldr	r3, [r3, #32]
 80021ce:	f023 0201 	bic.w	r2, r3, #1
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a1b      	ldr	r3, [r3, #32]
 80021da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	699b      	ldr	r3, [r3, #24]
 80021e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f023 0303 	bic.w	r3, r3, #3
 80021f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	68fa      	ldr	r2, [r7, #12]
 80021fe:	4313      	orrs	r3, r2
 8002200:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	f023 0302 	bic.w	r3, r3, #2
 8002208:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	697a      	ldr	r2, [r7, #20]
 8002210:	4313      	orrs	r3, r2
 8002212:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4a1c      	ldr	r2, [pc, #112]	; (8002288 <TIM_OC1_SetConfig+0xc8>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d10c      	bne.n	8002236 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	f023 0308 	bic.w	r3, r3, #8
 8002222:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	697a      	ldr	r2, [r7, #20]
 800222a:	4313      	orrs	r3, r2
 800222c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	f023 0304 	bic.w	r3, r3, #4
 8002234:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a13      	ldr	r2, [pc, #76]	; (8002288 <TIM_OC1_SetConfig+0xc8>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d111      	bne.n	8002262 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002244:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800224c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	695b      	ldr	r3, [r3, #20]
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	4313      	orrs	r3, r2
 8002256:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	693a      	ldr	r2, [r7, #16]
 800225e:	4313      	orrs	r3, r2
 8002260:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	693a      	ldr	r2, [r7, #16]
 8002266:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	68fa      	ldr	r2, [r7, #12]
 800226c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685a      	ldr	r2, [r3, #4]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	697a      	ldr	r2, [r7, #20]
 800227a:	621a      	str	r2, [r3, #32]
}
 800227c:	bf00      	nop
 800227e:	371c      	adds	r7, #28
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr
 8002288:	40010000 	.word	0x40010000

0800228c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800228c:	b480      	push	{r7}
 800228e:	b087      	sub	sp, #28
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a1b      	ldr	r3, [r3, #32]
 800229a:	f023 0210 	bic.w	r2, r3, #16
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a1b      	ldr	r3, [r3, #32]
 80022a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	699b      	ldr	r3, [r3, #24]
 80022b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	021b      	lsls	r3, r3, #8
 80022ca:	68fa      	ldr	r2, [r7, #12]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	f023 0320 	bic.w	r3, r3, #32
 80022d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	011b      	lsls	r3, r3, #4
 80022de:	697a      	ldr	r2, [r7, #20]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4a1e      	ldr	r2, [pc, #120]	; (8002360 <TIM_OC2_SetConfig+0xd4>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d10d      	bne.n	8002308 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	011b      	lsls	r3, r3, #4
 80022fa:	697a      	ldr	r2, [r7, #20]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002306:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	4a15      	ldr	r2, [pc, #84]	; (8002360 <TIM_OC2_SetConfig+0xd4>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d113      	bne.n	8002338 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002316:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800231e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	695b      	ldr	r3, [r3, #20]
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	4313      	orrs	r3, r2
 800232a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	699b      	ldr	r3, [r3, #24]
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	4313      	orrs	r3, r2
 8002336:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	68fa      	ldr	r2, [r7, #12]
 8002342:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685a      	ldr	r2, [r3, #4]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	697a      	ldr	r2, [r7, #20]
 8002350:	621a      	str	r2, [r3, #32]
}
 8002352:	bf00      	nop
 8002354:	371c      	adds	r7, #28
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	40010000 	.word	0x40010000

08002364 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002364:	b480      	push	{r7}
 8002366:	b087      	sub	sp, #28
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a1b      	ldr	r3, [r3, #32]
 8002372:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a1b      	ldr	r3, [r3, #32]
 800237e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	69db      	ldr	r3, [r3, #28]
 800238a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002392:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f023 0303 	bic.w	r3, r3, #3
 800239a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	68fa      	ldr	r2, [r7, #12]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80023ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	021b      	lsls	r3, r3, #8
 80023b4:	697a      	ldr	r2, [r7, #20]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a1d      	ldr	r2, [pc, #116]	; (8002434 <TIM_OC3_SetConfig+0xd0>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d10d      	bne.n	80023de <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80023c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	021b      	lsls	r3, r3, #8
 80023d0:	697a      	ldr	r2, [r7, #20]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80023dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a14      	ldr	r2, [pc, #80]	; (8002434 <TIM_OC3_SetConfig+0xd0>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d113      	bne.n	800240e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80023ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80023f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	695b      	ldr	r3, [r3, #20]
 80023fa:	011b      	lsls	r3, r3, #4
 80023fc:	693a      	ldr	r2, [r7, #16]
 80023fe:	4313      	orrs	r3, r2
 8002400:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	699b      	ldr	r3, [r3, #24]
 8002406:	011b      	lsls	r3, r3, #4
 8002408:	693a      	ldr	r2, [r7, #16]
 800240a:	4313      	orrs	r3, r2
 800240c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	693a      	ldr	r2, [r7, #16]
 8002412:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	68fa      	ldr	r2, [r7, #12]
 8002418:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	685a      	ldr	r2, [r3, #4]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	697a      	ldr	r2, [r7, #20]
 8002426:	621a      	str	r2, [r3, #32]
}
 8002428:	bf00      	nop
 800242a:	371c      	adds	r7, #28
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr
 8002434:	40010000 	.word	0x40010000

08002438 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002438:	b480      	push	{r7}
 800243a:	b087      	sub	sp, #28
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a1b      	ldr	r3, [r3, #32]
 8002446:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a1b      	ldr	r3, [r3, #32]
 8002452:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	69db      	ldr	r3, [r3, #28]
 800245e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002466:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800246e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	021b      	lsls	r3, r3, #8
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	4313      	orrs	r3, r2
 800247a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002482:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	031b      	lsls	r3, r3, #12
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	4313      	orrs	r3, r2
 800248e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	4a10      	ldr	r2, [pc, #64]	; (80024d4 <TIM_OC4_SetConfig+0x9c>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d109      	bne.n	80024ac <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800249e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	695b      	ldr	r3, [r3, #20]
 80024a4:	019b      	lsls	r3, r3, #6
 80024a6:	697a      	ldr	r2, [r7, #20]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	697a      	ldr	r2, [r7, #20]
 80024b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	68fa      	ldr	r2, [r7, #12]
 80024b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685a      	ldr	r2, [r3, #4]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	621a      	str	r2, [r3, #32]
}
 80024c6:	bf00      	nop
 80024c8:	371c      	adds	r7, #28
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	40010000 	.word	0x40010000

080024d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024d8:	b480      	push	{r7}
 80024da:	b087      	sub	sp, #28
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6a1b      	ldr	r3, [r3, #32]
 80024e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6a1b      	ldr	r3, [r3, #32]
 80024ee:	f023 0201 	bic.w	r2, r3, #1
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	699b      	ldr	r3, [r3, #24]
 80024fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002502:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	011b      	lsls	r3, r3, #4
 8002508:	693a      	ldr	r2, [r7, #16]
 800250a:	4313      	orrs	r3, r2
 800250c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	f023 030a 	bic.w	r3, r3, #10
 8002514:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002516:	697a      	ldr	r2, [r7, #20]
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	4313      	orrs	r3, r2
 800251c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	693a      	ldr	r2, [r7, #16]
 8002522:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	697a      	ldr	r2, [r7, #20]
 8002528:	621a      	str	r2, [r3, #32]
}
 800252a:	bf00      	nop
 800252c:	371c      	adds	r7, #28
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr

08002536 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002536:	b480      	push	{r7}
 8002538:	b087      	sub	sp, #28
 800253a:	af00      	add	r7, sp, #0
 800253c:	60f8      	str	r0, [r7, #12]
 800253e:	60b9      	str	r1, [r7, #8]
 8002540:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6a1b      	ldr	r3, [r3, #32]
 8002546:	f023 0210 	bic.w	r2, r3, #16
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6a1b      	ldr	r3, [r3, #32]
 8002558:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002560:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	031b      	lsls	r3, r3, #12
 8002566:	697a      	ldr	r2, [r7, #20]
 8002568:	4313      	orrs	r3, r2
 800256a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002572:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	011b      	lsls	r3, r3, #4
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	4313      	orrs	r3, r2
 800257c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	697a      	ldr	r2, [r7, #20]
 8002582:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	693a      	ldr	r2, [r7, #16]
 8002588:	621a      	str	r2, [r3, #32]
}
 800258a:	bf00      	nop
 800258c:	371c      	adds	r7, #28
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr

08002596 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002596:	b480      	push	{r7}
 8002598:	b085      	sub	sp, #20
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
 800259e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80025ae:	683a      	ldr	r2, [r7, #0]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	f043 0307 	orr.w	r3, r3, #7
 80025b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	68fa      	ldr	r2, [r7, #12]
 80025be:	609a      	str	r2, [r3, #8]
}
 80025c0:	bf00      	nop
 80025c2:	3714      	adds	r7, #20
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b087      	sub	sp, #28
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	607a      	str	r2, [r7, #4]
 80025d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80025e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	021a      	lsls	r2, r3, #8
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	431a      	orrs	r2, r3
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	697a      	ldr	r2, [r7, #20]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	697a      	ldr	r2, [r7, #20]
 80025fe:	609a      	str	r2, [r3, #8]
}
 8002600:	bf00      	nop
 8002602:	371c      	adds	r7, #28
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800260c:	b480      	push	{r7}
 800260e:	b085      	sub	sp, #20
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800261c:	2b01      	cmp	r3, #1
 800261e:	d101      	bne.n	8002624 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002620:	2302      	movs	r3, #2
 8002622:	e050      	b.n	80026c6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2202      	movs	r2, #2
 8002630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800264a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	68fa      	ldr	r2, [r7, #12]
 8002652:	4313      	orrs	r3, r2
 8002654:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	68fa      	ldr	r2, [r7, #12]
 800265c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a1c      	ldr	r2, [pc, #112]	; (80026d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d018      	beq.n	800269a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002670:	d013      	beq.n	800269a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a18      	ldr	r2, [pc, #96]	; (80026d8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d00e      	beq.n	800269a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a16      	ldr	r2, [pc, #88]	; (80026dc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d009      	beq.n	800269a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a15      	ldr	r2, [pc, #84]	; (80026e0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d004      	beq.n	800269a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a13      	ldr	r2, [pc, #76]	; (80026e4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d10c      	bne.n	80026b4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	68ba      	ldr	r2, [r7, #8]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68ba      	ldr	r2, [r7, #8]
 80026b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3714      	adds	r7, #20
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	40010000 	.word	0x40010000
 80026d8:	40000400 	.word	0x40000400
 80026dc:	40000800 	.word	0x40000800
 80026e0:	40000c00 	.word	0x40000c00
 80026e4:	40014000 	.word	0x40014000

080026e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b085      	sub	sp, #20
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80026f2:	2300      	movs	r3, #0
 80026f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d101      	bne.n	8002704 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002700:	2302      	movs	r3, #2
 8002702:	e03d      	b.n	8002780 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	4313      	orrs	r3, r2
 8002718:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	4313      	orrs	r3, r2
 8002726:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	4313      	orrs	r3, r2
 8002734:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4313      	orrs	r3, r2
 8002742:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	4313      	orrs	r3, r2
 8002750:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	695b      	ldr	r3, [r3, #20]
 800275c:	4313      	orrs	r3, r2
 800275e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	69db      	ldr	r3, [r3, #28]
 800276a:	4313      	orrs	r3, r2
 800276c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68fa      	ldr	r2, [r7, #12]
 8002774:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800277e:	2300      	movs	r3, #0
}
 8002780:	4618      	mov	r0, r3
 8002782:	3714      	adds	r7, #20
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d101      	bne.n	800279e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e03f      	b.n	800281e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d106      	bne.n	80027b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f7fe f90a 	bl	80009cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2224      	movs	r2, #36	; 0x24
 80027bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	68da      	ldr	r2, [r3, #12]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f000 fd29 	bl	8003228 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	691a      	ldr	r2, [r3, #16]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	695a      	ldr	r2, [r3, #20]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68da      	ldr	r2, [r3, #12]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002804:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2220      	movs	r2, #32
 8002810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2220      	movs	r2, #32
 8002818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	3708      	adds	r7, #8
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}

08002826 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002826:	b480      	push	{r7}
 8002828:	b085      	sub	sp, #20
 800282a:	af00      	add	r7, sp, #0
 800282c:	60f8      	str	r0, [r7, #12]
 800282e:	60b9      	str	r1, [r7, #8]
 8002830:	4613      	mov	r3, r2
 8002832:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800283a:	b2db      	uxtb	r3, r3
 800283c:	2b20      	cmp	r3, #32
 800283e:	d130      	bne.n	80028a2 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d002      	beq.n	800284c <HAL_UART_Transmit_IT+0x26>
 8002846:	88fb      	ldrh	r3, [r7, #6]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d101      	bne.n	8002850 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e029      	b.n	80028a4 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002856:	2b01      	cmp	r3, #1
 8002858:	d101      	bne.n	800285e <HAL_UART_Transmit_IT+0x38>
 800285a:	2302      	movs	r3, #2
 800285c:	e022      	b.n	80028a4 <HAL_UART_Transmit_IT+0x7e>
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2201      	movs	r2, #1
 8002862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	68ba      	ldr	r2, [r7, #8]
 800286a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	88fa      	ldrh	r2, [r7, #6]
 8002870:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	88fa      	ldrh	r2, [r7, #6]
 8002876:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2200      	movs	r2, #0
 800287c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2221      	movs	r2, #33	; 0x21
 8002882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	68da      	ldr	r2, [r3, #12]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800289c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800289e:	2300      	movs	r3, #0
 80028a0:	e000      	b.n	80028a4 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80028a2:	2302      	movs	r3, #2
  }
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3714      	adds	r7, #20
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	4613      	mov	r3, r2
 80028bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2b20      	cmp	r3, #32
 80028c8:	d11d      	bne.n	8002906 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d002      	beq.n	80028d6 <HAL_UART_Receive_IT+0x26>
 80028d0:	88fb      	ldrh	r3, [r7, #6]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d101      	bne.n	80028da <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e016      	b.n	8002908 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d101      	bne.n	80028e8 <HAL_UART_Receive_IT+0x38>
 80028e4:	2302      	movs	r3, #2
 80028e6:	e00f      	b.n	8002908 <HAL_UART_Receive_IT+0x58>
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2200      	movs	r2, #0
 80028f4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80028f6:	88fb      	ldrh	r3, [r7, #6]
 80028f8:	461a      	mov	r2, r3
 80028fa:	68b9      	ldr	r1, [r7, #8]
 80028fc:	68f8      	ldr	r0, [r7, #12]
 80028fe:	f000 fabf 	bl	8002e80 <UART_Start_Receive_IT>
 8002902:	4603      	mov	r3, r0
 8002904:	e000      	b.n	8002908 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002906:	2302      	movs	r3, #2
  }
}
 8002908:	4618      	mov	r0, r3
 800290a:	3710      	adds	r7, #16
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b0ba      	sub	sp, #232	; 0xe8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002936:	2300      	movs	r3, #0
 8002938:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800293c:	2300      	movs	r3, #0
 800293e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002946:	f003 030f 	and.w	r3, r3, #15
 800294a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800294e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002952:	2b00      	cmp	r3, #0
 8002954:	d10f      	bne.n	8002976 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800295a:	f003 0320 	and.w	r3, r3, #32
 800295e:	2b00      	cmp	r3, #0
 8002960:	d009      	beq.n	8002976 <HAL_UART_IRQHandler+0x66>
 8002962:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002966:	f003 0320 	and.w	r3, r3, #32
 800296a:	2b00      	cmp	r3, #0
 800296c:	d003      	beq.n	8002976 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 fb9f 	bl	80030b2 <UART_Receive_IT>
      return;
 8002974:	e256      	b.n	8002e24 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002976:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800297a:	2b00      	cmp	r3, #0
 800297c:	f000 80de 	beq.w	8002b3c <HAL_UART_IRQHandler+0x22c>
 8002980:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002984:	f003 0301 	and.w	r3, r3, #1
 8002988:	2b00      	cmp	r3, #0
 800298a:	d106      	bne.n	800299a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800298c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002990:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002994:	2b00      	cmp	r3, #0
 8002996:	f000 80d1 	beq.w	8002b3c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800299a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800299e:	f003 0301 	and.w	r3, r3, #1
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00b      	beq.n	80029be <HAL_UART_IRQHandler+0xae>
 80029a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d005      	beq.n	80029be <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b6:	f043 0201 	orr.w	r2, r3, #1
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80029be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029c2:	f003 0304 	and.w	r3, r3, #4
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d00b      	beq.n	80029e2 <HAL_UART_IRQHandler+0xd2>
 80029ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d005      	beq.n	80029e2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029da:	f043 0202 	orr.w	r2, r3, #2
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80029e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d00b      	beq.n	8002a06 <HAL_UART_IRQHandler+0xf6>
 80029ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d005      	beq.n	8002a06 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fe:	f043 0204 	orr.w	r2, r3, #4
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002a06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a0a:	f003 0308 	and.w	r3, r3, #8
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d011      	beq.n	8002a36 <HAL_UART_IRQHandler+0x126>
 8002a12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a16:	f003 0320 	and.w	r3, r3, #32
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d105      	bne.n	8002a2a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002a1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d005      	beq.n	8002a36 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2e:	f043 0208 	orr.w	r2, r3, #8
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	f000 81ed 	beq.w	8002e1a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a44:	f003 0320 	and.w	r3, r3, #32
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d008      	beq.n	8002a5e <HAL_UART_IRQHandler+0x14e>
 8002a4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a50:	f003 0320 	and.w	r3, r3, #32
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d002      	beq.n	8002a5e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f000 fb2a 	bl	80030b2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	695b      	ldr	r3, [r3, #20]
 8002a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a68:	2b40      	cmp	r3, #64	; 0x40
 8002a6a:	bf0c      	ite	eq
 8002a6c:	2301      	moveq	r3, #1
 8002a6e:	2300      	movne	r3, #0
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7a:	f003 0308 	and.w	r3, r3, #8
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d103      	bne.n	8002a8a <HAL_UART_IRQHandler+0x17a>
 8002a82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d04f      	beq.n	8002b2a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 fa32 	bl	8002ef4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	695b      	ldr	r3, [r3, #20]
 8002a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a9a:	2b40      	cmp	r3, #64	; 0x40
 8002a9c:	d141      	bne.n	8002b22 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	3314      	adds	r3, #20
 8002aa4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aa8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002aac:	e853 3f00 	ldrex	r3, [r3]
 8002ab0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002ab4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ab8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002abc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	3314      	adds	r3, #20
 8002ac6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002aca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002ace:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ad2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002ad6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002ada:	e841 2300 	strex	r3, r2, [r1]
 8002ade:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002ae2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d1d9      	bne.n	8002a9e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d013      	beq.n	8002b1a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af6:	4a7d      	ldr	r2, [pc, #500]	; (8002cec <HAL_UART_IRQHandler+0x3dc>)
 8002af8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7fe fa53 	bl	8000faa <HAL_DMA_Abort_IT>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d016      	beq.n	8002b38 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b14:	4610      	mov	r0, r2
 8002b16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b18:	e00e      	b.n	8002b38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f000 f99a 	bl	8002e54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b20:	e00a      	b.n	8002b38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 f996 	bl	8002e54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b28:	e006      	b.n	8002b38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 f992 	bl	8002e54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002b36:	e170      	b.n	8002e1a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b38:	bf00      	nop
    return;
 8002b3a:	e16e      	b.n	8002e1a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	f040 814a 	bne.w	8002dda <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002b46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b4a:	f003 0310 	and.w	r3, r3, #16
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	f000 8143 	beq.w	8002dda <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002b54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b58:	f003 0310 	and.w	r3, r3, #16
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	f000 813c 	beq.w	8002dda <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002b62:	2300      	movs	r3, #0
 8002b64:	60bb      	str	r3, [r7, #8]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	60bb      	str	r3, [r7, #8]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	60bb      	str	r3, [r7, #8]
 8002b76:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	695b      	ldr	r3, [r3, #20]
 8002b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b82:	2b40      	cmp	r3, #64	; 0x40
 8002b84:	f040 80b4 	bne.w	8002cf0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002b94:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	f000 8140 	beq.w	8002e1e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002ba2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	f080 8139 	bcs.w	8002e1e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002bb2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb8:	69db      	ldr	r3, [r3, #28]
 8002bba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bbe:	f000 8088 	beq.w	8002cd2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	330c      	adds	r3, #12
 8002bc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bcc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002bd0:	e853 3f00 	ldrex	r3, [r3]
 8002bd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002bd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002bdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002be0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	330c      	adds	r3, #12
 8002bea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002bee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002bf2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bf6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002bfa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002bfe:	e841 2300 	strex	r3, r2, [r1]
 8002c02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002c06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d1d9      	bne.n	8002bc2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	3314      	adds	r3, #20
 8002c14:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c18:	e853 3f00 	ldrex	r3, [r3]
 8002c1c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002c1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c20:	f023 0301 	bic.w	r3, r3, #1
 8002c24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	3314      	adds	r3, #20
 8002c2e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002c32:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002c36:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c38:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002c3a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002c3e:	e841 2300 	strex	r3, r2, [r1]
 8002c42:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002c44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d1e1      	bne.n	8002c0e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	3314      	adds	r3, #20
 8002c50:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c54:	e853 3f00 	ldrex	r3, [r3]
 8002c58:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002c5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	3314      	adds	r3, #20
 8002c6a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002c6e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002c70:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c72:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002c74:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002c76:	e841 2300 	strex	r3, r2, [r1]
 8002c7a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002c7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d1e3      	bne.n	8002c4a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2220      	movs	r2, #32
 8002c86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	330c      	adds	r3, #12
 8002c96:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c9a:	e853 3f00 	ldrex	r3, [r3]
 8002c9e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002ca0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ca2:	f023 0310 	bic.w	r3, r3, #16
 8002ca6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	330c      	adds	r3, #12
 8002cb0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002cb4:	65ba      	str	r2, [r7, #88]	; 0x58
 8002cb6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cb8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002cba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002cbc:	e841 2300 	strex	r3, r2, [r1]
 8002cc0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002cc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d1e3      	bne.n	8002c90 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7fe f8fc 	bl	8000eca <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 f8c0 	bl	8002e68 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002ce8:	e099      	b.n	8002e1e <HAL_UART_IRQHandler+0x50e>
 8002cea:	bf00      	nop
 8002cec:	08002fbb 	.word	0x08002fbb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f000 808b 	beq.w	8002e22 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002d0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	f000 8086 	beq.w	8002e22 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	330c      	adds	r3, #12
 8002d1c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d20:	e853 3f00 	ldrex	r3, [r3]
 8002d24:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d28:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002d2c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	330c      	adds	r3, #12
 8002d36:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002d3a:	647a      	str	r2, [r7, #68]	; 0x44
 8002d3c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d3e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002d40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d42:	e841 2300 	strex	r3, r2, [r1]
 8002d46:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002d48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1e3      	bne.n	8002d16 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	3314      	adds	r3, #20
 8002d54:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d58:	e853 3f00 	ldrex	r3, [r3]
 8002d5c:	623b      	str	r3, [r7, #32]
   return(result);
 8002d5e:	6a3b      	ldr	r3, [r7, #32]
 8002d60:	f023 0301 	bic.w	r3, r3, #1
 8002d64:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	3314      	adds	r3, #20
 8002d6e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002d72:	633a      	str	r2, [r7, #48]	; 0x30
 8002d74:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002d78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d7a:	e841 2300 	strex	r3, r2, [r1]
 8002d7e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d1e3      	bne.n	8002d4e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2220      	movs	r2, #32
 8002d8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	330c      	adds	r3, #12
 8002d9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	e853 3f00 	ldrex	r3, [r3]
 8002da2:	60fb      	str	r3, [r7, #12]
   return(result);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f023 0310 	bic.w	r3, r3, #16
 8002daa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	330c      	adds	r3, #12
 8002db4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002db8:	61fa      	str	r2, [r7, #28]
 8002dba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dbc:	69b9      	ldr	r1, [r7, #24]
 8002dbe:	69fa      	ldr	r2, [r7, #28]
 8002dc0:	e841 2300 	strex	r3, r2, [r1]
 8002dc4:	617b      	str	r3, [r7, #20]
   return(result);
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d1e3      	bne.n	8002d94 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002dcc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 f848 	bl	8002e68 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002dd8:	e023      	b.n	8002e22 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002dda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d009      	beq.n	8002dfa <HAL_UART_IRQHandler+0x4ea>
 8002de6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d003      	beq.n	8002dfa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f000 f8f5 	bl	8002fe2 <UART_Transmit_IT>
    return;
 8002df8:	e014      	b.n	8002e24 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002dfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00e      	beq.n	8002e24 <HAL_UART_IRQHandler+0x514>
 8002e06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d008      	beq.n	8002e24 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 f935 	bl	8003082 <UART_EndTransmit_IT>
    return;
 8002e18:	e004      	b.n	8002e24 <HAL_UART_IRQHandler+0x514>
    return;
 8002e1a:	bf00      	nop
 8002e1c:	e002      	b.n	8002e24 <HAL_UART_IRQHandler+0x514>
      return;
 8002e1e:	bf00      	nop
 8002e20:	e000      	b.n	8002e24 <HAL_UART_IRQHandler+0x514>
      return;
 8002e22:	bf00      	nop
  }
}
 8002e24:	37e8      	adds	r7, #232	; 0xe8
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop

08002e2c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002e48:	bf00      	nop
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002e5c:	bf00      	nop
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	460b      	mov	r3, r1
 8002e72:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b085      	sub	sp, #20
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	68ba      	ldr	r2, [r7, #8]
 8002e92:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	88fa      	ldrh	r2, [r7, #6]
 8002e98:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	88fa      	ldrh	r2, [r7, #6]
 8002e9e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2222      	movs	r2, #34	; 0x22
 8002eaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	68da      	ldr	r2, [r3, #12]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ec4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	695a      	ldr	r2, [r3, #20]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f042 0201 	orr.w	r2, r2, #1
 8002ed4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68da      	ldr	r2, [r3, #12]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f042 0220 	orr.w	r2, r2, #32
 8002ee4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3714      	adds	r7, #20
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b095      	sub	sp, #84	; 0x54
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	330c      	adds	r3, #12
 8002f02:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f06:	e853 3f00 	ldrex	r3, [r3]
 8002f0a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f0e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002f12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	330c      	adds	r3, #12
 8002f1a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f1c:	643a      	str	r2, [r7, #64]	; 0x40
 8002f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f20:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002f22:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002f24:	e841 2300 	strex	r3, r2, [r1]
 8002f28:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d1e5      	bne.n	8002efc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	3314      	adds	r3, #20
 8002f36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f38:	6a3b      	ldr	r3, [r7, #32]
 8002f3a:	e853 3f00 	ldrex	r3, [r3]
 8002f3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	f023 0301 	bic.w	r3, r3, #1
 8002f46:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	3314      	adds	r3, #20
 8002f4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f50:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f58:	e841 2300 	strex	r3, r2, [r1]
 8002f5c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d1e5      	bne.n	8002f30 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d119      	bne.n	8002fa0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	330c      	adds	r3, #12
 8002f72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	e853 3f00 	ldrex	r3, [r3]
 8002f7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	f023 0310 	bic.w	r3, r3, #16
 8002f82:	647b      	str	r3, [r7, #68]	; 0x44
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	330c      	adds	r3, #12
 8002f8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f8c:	61ba      	str	r2, [r7, #24]
 8002f8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f90:	6979      	ldr	r1, [r7, #20]
 8002f92:	69ba      	ldr	r2, [r7, #24]
 8002f94:	e841 2300 	strex	r3, r2, [r1]
 8002f98:	613b      	str	r3, [r7, #16]
   return(result);
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d1e5      	bne.n	8002f6c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2220      	movs	r2, #32
 8002fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002fae:	bf00      	nop
 8002fb0:	3754      	adds	r7, #84	; 0x54
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr

08002fba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b084      	sub	sp, #16
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002fd4:	68f8      	ldr	r0, [r7, #12]
 8002fd6:	f7ff ff3d 	bl	8002e54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002fda:	bf00      	nop
 8002fdc:	3710      	adds	r7, #16
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	b085      	sub	sp, #20
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b21      	cmp	r3, #33	; 0x21
 8002ff4:	d13e      	bne.n	8003074 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ffe:	d114      	bne.n	800302a <UART_Transmit_IT+0x48>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	691b      	ldr	r3, [r3, #16]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d110      	bne.n	800302a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a1b      	ldr	r3, [r3, #32]
 800300c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	881b      	ldrh	r3, [r3, #0]
 8003012:	461a      	mov	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800301c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a1b      	ldr	r3, [r3, #32]
 8003022:	1c9a      	adds	r2, r3, #2
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	621a      	str	r2, [r3, #32]
 8003028:	e008      	b.n	800303c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a1b      	ldr	r3, [r3, #32]
 800302e:	1c59      	adds	r1, r3, #1
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	6211      	str	r1, [r2, #32]
 8003034:	781a      	ldrb	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003040:	b29b      	uxth	r3, r3
 8003042:	3b01      	subs	r3, #1
 8003044:	b29b      	uxth	r3, r3
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	4619      	mov	r1, r3
 800304a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800304c:	2b00      	cmp	r3, #0
 800304e:	d10f      	bne.n	8003070 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68da      	ldr	r2, [r3, #12]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800305e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68da      	ldr	r2, [r3, #12]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800306e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003070:	2300      	movs	r3, #0
 8003072:	e000      	b.n	8003076 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003074:	2302      	movs	r3, #2
  }
}
 8003076:	4618      	mov	r0, r3
 8003078:	3714      	adds	r7, #20
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr

08003082 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003082:	b580      	push	{r7, lr}
 8003084:	b082      	sub	sp, #8
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68da      	ldr	r2, [r3, #12]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003098:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2220      	movs	r2, #32
 800309e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f7ff fec2 	bl	8002e2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3708      	adds	r7, #8
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b08c      	sub	sp, #48	; 0x30
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b22      	cmp	r3, #34	; 0x22
 80030c4:	f040 80ab 	bne.w	800321e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030d0:	d117      	bne.n	8003102 <UART_Receive_IT+0x50>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d113      	bne.n	8003102 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80030da:	2300      	movs	r3, #0
 80030dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030f0:	b29a      	uxth	r2, r3
 80030f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fa:	1c9a      	adds	r2, r3, #2
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	629a      	str	r2, [r3, #40]	; 0x28
 8003100:	e026      	b.n	8003150 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003106:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003108:	2300      	movs	r3, #0
 800310a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003114:	d007      	beq.n	8003126 <UART_Receive_IT+0x74>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d10a      	bne.n	8003134 <UART_Receive_IT+0x82>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d106      	bne.n	8003134 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	b2da      	uxtb	r2, r3
 800312e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003130:	701a      	strb	r2, [r3, #0]
 8003132:	e008      	b.n	8003146 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	b2db      	uxtb	r3, r3
 800313c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003140:	b2da      	uxtb	r2, r3
 8003142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003144:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800314a:	1c5a      	adds	r2, r3, #1
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003154:	b29b      	uxth	r3, r3
 8003156:	3b01      	subs	r3, #1
 8003158:	b29b      	uxth	r3, r3
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	4619      	mov	r1, r3
 800315e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003160:	2b00      	cmp	r3, #0
 8003162:	d15a      	bne.n	800321a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	68da      	ldr	r2, [r3, #12]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f022 0220 	bic.w	r2, r2, #32
 8003172:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	68da      	ldr	r2, [r3, #12]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003182:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	695a      	ldr	r2, [r3, #20]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f022 0201 	bic.w	r2, r2, #1
 8003192:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2220      	movs	r2, #32
 8003198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d135      	bne.n	8003210 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	330c      	adds	r3, #12
 80031b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	e853 3f00 	ldrex	r3, [r3]
 80031b8:	613b      	str	r3, [r7, #16]
   return(result);
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	f023 0310 	bic.w	r3, r3, #16
 80031c0:	627b      	str	r3, [r7, #36]	; 0x24
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	330c      	adds	r3, #12
 80031c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031ca:	623a      	str	r2, [r7, #32]
 80031cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ce:	69f9      	ldr	r1, [r7, #28]
 80031d0:	6a3a      	ldr	r2, [r7, #32]
 80031d2:	e841 2300 	strex	r3, r2, [r1]
 80031d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d1e5      	bne.n	80031aa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0310 	and.w	r3, r3, #16
 80031e8:	2b10      	cmp	r3, #16
 80031ea:	d10a      	bne.n	8003202 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80031ec:	2300      	movs	r3, #0
 80031ee:	60fb      	str	r3, [r7, #12]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	60fb      	str	r3, [r7, #12]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	60fb      	str	r3, [r7, #12]
 8003200:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003206:	4619      	mov	r1, r3
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f7ff fe2d 	bl	8002e68 <HAL_UARTEx_RxEventCallback>
 800320e:	e002      	b.n	8003216 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f7ff fe15 	bl	8002e40 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003216:	2300      	movs	r3, #0
 8003218:	e002      	b.n	8003220 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800321a:	2300      	movs	r3, #0
 800321c:	e000      	b.n	8003220 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800321e:	2302      	movs	r3, #2
  }
}
 8003220:	4618      	mov	r0, r3
 8003222:	3730      	adds	r7, #48	; 0x30
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800322c:	b09f      	sub	sp, #124	; 0x7c
 800322e:	af00      	add	r7, sp, #0
 8003230:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003232:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	691b      	ldr	r3, [r3, #16]
 8003238:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800323c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800323e:	68d9      	ldr	r1, [r3, #12]
 8003240:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	ea40 0301 	orr.w	r3, r0, r1
 8003248:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800324a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800324c:	689a      	ldr	r2, [r3, #8]
 800324e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003250:	691b      	ldr	r3, [r3, #16]
 8003252:	431a      	orrs	r2, r3
 8003254:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003256:	695b      	ldr	r3, [r3, #20]
 8003258:	431a      	orrs	r2, r3
 800325a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800325c:	69db      	ldr	r3, [r3, #28]
 800325e:	4313      	orrs	r3, r2
 8003260:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003262:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800326c:	f021 010c 	bic.w	r1, r1, #12
 8003270:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003276:	430b      	orrs	r3, r1
 8003278:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800327a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	695b      	ldr	r3, [r3, #20]
 8003280:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003284:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003286:	6999      	ldr	r1, [r3, #24]
 8003288:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	ea40 0301 	orr.w	r3, r0, r1
 8003290:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003292:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	4bc5      	ldr	r3, [pc, #788]	; (80035ac <UART_SetConfig+0x384>)
 8003298:	429a      	cmp	r2, r3
 800329a:	d004      	beq.n	80032a6 <UART_SetConfig+0x7e>
 800329c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	4bc3      	ldr	r3, [pc, #780]	; (80035b0 <UART_SetConfig+0x388>)
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d103      	bne.n	80032ae <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80032a6:	f7fe fcc5 	bl	8001c34 <HAL_RCC_GetPCLK2Freq>
 80032aa:	6778      	str	r0, [r7, #116]	; 0x74
 80032ac:	e002      	b.n	80032b4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80032ae:	f7fe fcad 	bl	8001c0c <HAL_RCC_GetPCLK1Freq>
 80032b2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032b6:	69db      	ldr	r3, [r3, #28]
 80032b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032bc:	f040 80b6 	bne.w	800342c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80032c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032c2:	461c      	mov	r4, r3
 80032c4:	f04f 0500 	mov.w	r5, #0
 80032c8:	4622      	mov	r2, r4
 80032ca:	462b      	mov	r3, r5
 80032cc:	1891      	adds	r1, r2, r2
 80032ce:	6439      	str	r1, [r7, #64]	; 0x40
 80032d0:	415b      	adcs	r3, r3
 80032d2:	647b      	str	r3, [r7, #68]	; 0x44
 80032d4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80032d8:	1912      	adds	r2, r2, r4
 80032da:	eb45 0303 	adc.w	r3, r5, r3
 80032de:	f04f 0000 	mov.w	r0, #0
 80032e2:	f04f 0100 	mov.w	r1, #0
 80032e6:	00d9      	lsls	r1, r3, #3
 80032e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80032ec:	00d0      	lsls	r0, r2, #3
 80032ee:	4602      	mov	r2, r0
 80032f0:	460b      	mov	r3, r1
 80032f2:	1911      	adds	r1, r2, r4
 80032f4:	6639      	str	r1, [r7, #96]	; 0x60
 80032f6:	416b      	adcs	r3, r5
 80032f8:	667b      	str	r3, [r7, #100]	; 0x64
 80032fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	461a      	mov	r2, r3
 8003300:	f04f 0300 	mov.w	r3, #0
 8003304:	1891      	adds	r1, r2, r2
 8003306:	63b9      	str	r1, [r7, #56]	; 0x38
 8003308:	415b      	adcs	r3, r3
 800330a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800330c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003310:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003314:	f7fc ff60 	bl	80001d8 <__aeabi_uldivmod>
 8003318:	4602      	mov	r2, r0
 800331a:	460b      	mov	r3, r1
 800331c:	4ba5      	ldr	r3, [pc, #660]	; (80035b4 <UART_SetConfig+0x38c>)
 800331e:	fba3 2302 	umull	r2, r3, r3, r2
 8003322:	095b      	lsrs	r3, r3, #5
 8003324:	011e      	lsls	r6, r3, #4
 8003326:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003328:	461c      	mov	r4, r3
 800332a:	f04f 0500 	mov.w	r5, #0
 800332e:	4622      	mov	r2, r4
 8003330:	462b      	mov	r3, r5
 8003332:	1891      	adds	r1, r2, r2
 8003334:	6339      	str	r1, [r7, #48]	; 0x30
 8003336:	415b      	adcs	r3, r3
 8003338:	637b      	str	r3, [r7, #52]	; 0x34
 800333a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800333e:	1912      	adds	r2, r2, r4
 8003340:	eb45 0303 	adc.w	r3, r5, r3
 8003344:	f04f 0000 	mov.w	r0, #0
 8003348:	f04f 0100 	mov.w	r1, #0
 800334c:	00d9      	lsls	r1, r3, #3
 800334e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003352:	00d0      	lsls	r0, r2, #3
 8003354:	4602      	mov	r2, r0
 8003356:	460b      	mov	r3, r1
 8003358:	1911      	adds	r1, r2, r4
 800335a:	65b9      	str	r1, [r7, #88]	; 0x58
 800335c:	416b      	adcs	r3, r5
 800335e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003360:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	461a      	mov	r2, r3
 8003366:	f04f 0300 	mov.w	r3, #0
 800336a:	1891      	adds	r1, r2, r2
 800336c:	62b9      	str	r1, [r7, #40]	; 0x28
 800336e:	415b      	adcs	r3, r3
 8003370:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003372:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003376:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800337a:	f7fc ff2d 	bl	80001d8 <__aeabi_uldivmod>
 800337e:	4602      	mov	r2, r0
 8003380:	460b      	mov	r3, r1
 8003382:	4b8c      	ldr	r3, [pc, #560]	; (80035b4 <UART_SetConfig+0x38c>)
 8003384:	fba3 1302 	umull	r1, r3, r3, r2
 8003388:	095b      	lsrs	r3, r3, #5
 800338a:	2164      	movs	r1, #100	; 0x64
 800338c:	fb01 f303 	mul.w	r3, r1, r3
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	00db      	lsls	r3, r3, #3
 8003394:	3332      	adds	r3, #50	; 0x32
 8003396:	4a87      	ldr	r2, [pc, #540]	; (80035b4 <UART_SetConfig+0x38c>)
 8003398:	fba2 2303 	umull	r2, r3, r2, r3
 800339c:	095b      	lsrs	r3, r3, #5
 800339e:	005b      	lsls	r3, r3, #1
 80033a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80033a4:	441e      	add	r6, r3
 80033a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033a8:	4618      	mov	r0, r3
 80033aa:	f04f 0100 	mov.w	r1, #0
 80033ae:	4602      	mov	r2, r0
 80033b0:	460b      	mov	r3, r1
 80033b2:	1894      	adds	r4, r2, r2
 80033b4:	623c      	str	r4, [r7, #32]
 80033b6:	415b      	adcs	r3, r3
 80033b8:	627b      	str	r3, [r7, #36]	; 0x24
 80033ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80033be:	1812      	adds	r2, r2, r0
 80033c0:	eb41 0303 	adc.w	r3, r1, r3
 80033c4:	f04f 0400 	mov.w	r4, #0
 80033c8:	f04f 0500 	mov.w	r5, #0
 80033cc:	00dd      	lsls	r5, r3, #3
 80033ce:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80033d2:	00d4      	lsls	r4, r2, #3
 80033d4:	4622      	mov	r2, r4
 80033d6:	462b      	mov	r3, r5
 80033d8:	1814      	adds	r4, r2, r0
 80033da:	653c      	str	r4, [r7, #80]	; 0x50
 80033dc:	414b      	adcs	r3, r1
 80033de:	657b      	str	r3, [r7, #84]	; 0x54
 80033e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	461a      	mov	r2, r3
 80033e6:	f04f 0300 	mov.w	r3, #0
 80033ea:	1891      	adds	r1, r2, r2
 80033ec:	61b9      	str	r1, [r7, #24]
 80033ee:	415b      	adcs	r3, r3
 80033f0:	61fb      	str	r3, [r7, #28]
 80033f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033f6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80033fa:	f7fc feed 	bl	80001d8 <__aeabi_uldivmod>
 80033fe:	4602      	mov	r2, r0
 8003400:	460b      	mov	r3, r1
 8003402:	4b6c      	ldr	r3, [pc, #432]	; (80035b4 <UART_SetConfig+0x38c>)
 8003404:	fba3 1302 	umull	r1, r3, r3, r2
 8003408:	095b      	lsrs	r3, r3, #5
 800340a:	2164      	movs	r1, #100	; 0x64
 800340c:	fb01 f303 	mul.w	r3, r1, r3
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	00db      	lsls	r3, r3, #3
 8003414:	3332      	adds	r3, #50	; 0x32
 8003416:	4a67      	ldr	r2, [pc, #412]	; (80035b4 <UART_SetConfig+0x38c>)
 8003418:	fba2 2303 	umull	r2, r3, r2, r3
 800341c:	095b      	lsrs	r3, r3, #5
 800341e:	f003 0207 	and.w	r2, r3, #7
 8003422:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4432      	add	r2, r6
 8003428:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800342a:	e0b9      	b.n	80035a0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800342c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800342e:	461c      	mov	r4, r3
 8003430:	f04f 0500 	mov.w	r5, #0
 8003434:	4622      	mov	r2, r4
 8003436:	462b      	mov	r3, r5
 8003438:	1891      	adds	r1, r2, r2
 800343a:	6139      	str	r1, [r7, #16]
 800343c:	415b      	adcs	r3, r3
 800343e:	617b      	str	r3, [r7, #20]
 8003440:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003444:	1912      	adds	r2, r2, r4
 8003446:	eb45 0303 	adc.w	r3, r5, r3
 800344a:	f04f 0000 	mov.w	r0, #0
 800344e:	f04f 0100 	mov.w	r1, #0
 8003452:	00d9      	lsls	r1, r3, #3
 8003454:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003458:	00d0      	lsls	r0, r2, #3
 800345a:	4602      	mov	r2, r0
 800345c:	460b      	mov	r3, r1
 800345e:	eb12 0804 	adds.w	r8, r2, r4
 8003462:	eb43 0905 	adc.w	r9, r3, r5
 8003466:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	4618      	mov	r0, r3
 800346c:	f04f 0100 	mov.w	r1, #0
 8003470:	f04f 0200 	mov.w	r2, #0
 8003474:	f04f 0300 	mov.w	r3, #0
 8003478:	008b      	lsls	r3, r1, #2
 800347a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800347e:	0082      	lsls	r2, r0, #2
 8003480:	4640      	mov	r0, r8
 8003482:	4649      	mov	r1, r9
 8003484:	f7fc fea8 	bl	80001d8 <__aeabi_uldivmod>
 8003488:	4602      	mov	r2, r0
 800348a:	460b      	mov	r3, r1
 800348c:	4b49      	ldr	r3, [pc, #292]	; (80035b4 <UART_SetConfig+0x38c>)
 800348e:	fba3 2302 	umull	r2, r3, r3, r2
 8003492:	095b      	lsrs	r3, r3, #5
 8003494:	011e      	lsls	r6, r3, #4
 8003496:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003498:	4618      	mov	r0, r3
 800349a:	f04f 0100 	mov.w	r1, #0
 800349e:	4602      	mov	r2, r0
 80034a0:	460b      	mov	r3, r1
 80034a2:	1894      	adds	r4, r2, r2
 80034a4:	60bc      	str	r4, [r7, #8]
 80034a6:	415b      	adcs	r3, r3
 80034a8:	60fb      	str	r3, [r7, #12]
 80034aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80034ae:	1812      	adds	r2, r2, r0
 80034b0:	eb41 0303 	adc.w	r3, r1, r3
 80034b4:	f04f 0400 	mov.w	r4, #0
 80034b8:	f04f 0500 	mov.w	r5, #0
 80034bc:	00dd      	lsls	r5, r3, #3
 80034be:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80034c2:	00d4      	lsls	r4, r2, #3
 80034c4:	4622      	mov	r2, r4
 80034c6:	462b      	mov	r3, r5
 80034c8:	1814      	adds	r4, r2, r0
 80034ca:	64bc      	str	r4, [r7, #72]	; 0x48
 80034cc:	414b      	adcs	r3, r1
 80034ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	4618      	mov	r0, r3
 80034d6:	f04f 0100 	mov.w	r1, #0
 80034da:	f04f 0200 	mov.w	r2, #0
 80034de:	f04f 0300 	mov.w	r3, #0
 80034e2:	008b      	lsls	r3, r1, #2
 80034e4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80034e8:	0082      	lsls	r2, r0, #2
 80034ea:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80034ee:	f7fc fe73 	bl	80001d8 <__aeabi_uldivmod>
 80034f2:	4602      	mov	r2, r0
 80034f4:	460b      	mov	r3, r1
 80034f6:	4b2f      	ldr	r3, [pc, #188]	; (80035b4 <UART_SetConfig+0x38c>)
 80034f8:	fba3 1302 	umull	r1, r3, r3, r2
 80034fc:	095b      	lsrs	r3, r3, #5
 80034fe:	2164      	movs	r1, #100	; 0x64
 8003500:	fb01 f303 	mul.w	r3, r1, r3
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	011b      	lsls	r3, r3, #4
 8003508:	3332      	adds	r3, #50	; 0x32
 800350a:	4a2a      	ldr	r2, [pc, #168]	; (80035b4 <UART_SetConfig+0x38c>)
 800350c:	fba2 2303 	umull	r2, r3, r2, r3
 8003510:	095b      	lsrs	r3, r3, #5
 8003512:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003516:	441e      	add	r6, r3
 8003518:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800351a:	4618      	mov	r0, r3
 800351c:	f04f 0100 	mov.w	r1, #0
 8003520:	4602      	mov	r2, r0
 8003522:	460b      	mov	r3, r1
 8003524:	1894      	adds	r4, r2, r2
 8003526:	603c      	str	r4, [r7, #0]
 8003528:	415b      	adcs	r3, r3
 800352a:	607b      	str	r3, [r7, #4]
 800352c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003530:	1812      	adds	r2, r2, r0
 8003532:	eb41 0303 	adc.w	r3, r1, r3
 8003536:	f04f 0400 	mov.w	r4, #0
 800353a:	f04f 0500 	mov.w	r5, #0
 800353e:	00dd      	lsls	r5, r3, #3
 8003540:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003544:	00d4      	lsls	r4, r2, #3
 8003546:	4622      	mov	r2, r4
 8003548:	462b      	mov	r3, r5
 800354a:	eb12 0a00 	adds.w	sl, r2, r0
 800354e:	eb43 0b01 	adc.w	fp, r3, r1
 8003552:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	4618      	mov	r0, r3
 8003558:	f04f 0100 	mov.w	r1, #0
 800355c:	f04f 0200 	mov.w	r2, #0
 8003560:	f04f 0300 	mov.w	r3, #0
 8003564:	008b      	lsls	r3, r1, #2
 8003566:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800356a:	0082      	lsls	r2, r0, #2
 800356c:	4650      	mov	r0, sl
 800356e:	4659      	mov	r1, fp
 8003570:	f7fc fe32 	bl	80001d8 <__aeabi_uldivmod>
 8003574:	4602      	mov	r2, r0
 8003576:	460b      	mov	r3, r1
 8003578:	4b0e      	ldr	r3, [pc, #56]	; (80035b4 <UART_SetConfig+0x38c>)
 800357a:	fba3 1302 	umull	r1, r3, r3, r2
 800357e:	095b      	lsrs	r3, r3, #5
 8003580:	2164      	movs	r1, #100	; 0x64
 8003582:	fb01 f303 	mul.w	r3, r1, r3
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	011b      	lsls	r3, r3, #4
 800358a:	3332      	adds	r3, #50	; 0x32
 800358c:	4a09      	ldr	r2, [pc, #36]	; (80035b4 <UART_SetConfig+0x38c>)
 800358e:	fba2 2303 	umull	r2, r3, r2, r3
 8003592:	095b      	lsrs	r3, r3, #5
 8003594:	f003 020f 	and.w	r2, r3, #15
 8003598:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4432      	add	r2, r6
 800359e:	609a      	str	r2, [r3, #8]
}
 80035a0:	bf00      	nop
 80035a2:	377c      	adds	r7, #124	; 0x7c
 80035a4:	46bd      	mov	sp, r7
 80035a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035aa:	bf00      	nop
 80035ac:	40011000 	.word	0x40011000
 80035b0:	40011400 	.word	0x40011400
 80035b4:	51eb851f 	.word	0x51eb851f

080035b8 <__libc_init_array>:
 80035b8:	b570      	push	{r4, r5, r6, lr}
 80035ba:	4d0d      	ldr	r5, [pc, #52]	; (80035f0 <__libc_init_array+0x38>)
 80035bc:	4c0d      	ldr	r4, [pc, #52]	; (80035f4 <__libc_init_array+0x3c>)
 80035be:	1b64      	subs	r4, r4, r5
 80035c0:	10a4      	asrs	r4, r4, #2
 80035c2:	2600      	movs	r6, #0
 80035c4:	42a6      	cmp	r6, r4
 80035c6:	d109      	bne.n	80035dc <__libc_init_array+0x24>
 80035c8:	4d0b      	ldr	r5, [pc, #44]	; (80035f8 <__libc_init_array+0x40>)
 80035ca:	4c0c      	ldr	r4, [pc, #48]	; (80035fc <__libc_init_array+0x44>)
 80035cc:	f000 f820 	bl	8003610 <_init>
 80035d0:	1b64      	subs	r4, r4, r5
 80035d2:	10a4      	asrs	r4, r4, #2
 80035d4:	2600      	movs	r6, #0
 80035d6:	42a6      	cmp	r6, r4
 80035d8:	d105      	bne.n	80035e6 <__libc_init_array+0x2e>
 80035da:	bd70      	pop	{r4, r5, r6, pc}
 80035dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80035e0:	4798      	blx	r3
 80035e2:	3601      	adds	r6, #1
 80035e4:	e7ee      	b.n	80035c4 <__libc_init_array+0xc>
 80035e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80035ea:	4798      	blx	r3
 80035ec:	3601      	adds	r6, #1
 80035ee:	e7f2      	b.n	80035d6 <__libc_init_array+0x1e>
 80035f0:	08003648 	.word	0x08003648
 80035f4:	08003648 	.word	0x08003648
 80035f8:	08003648 	.word	0x08003648
 80035fc:	0800364c 	.word	0x0800364c

08003600 <memset>:
 8003600:	4402      	add	r2, r0
 8003602:	4603      	mov	r3, r0
 8003604:	4293      	cmp	r3, r2
 8003606:	d100      	bne.n	800360a <memset+0xa>
 8003608:	4770      	bx	lr
 800360a:	f803 1b01 	strb.w	r1, [r3], #1
 800360e:	e7f9      	b.n	8003604 <memset+0x4>

08003610 <_init>:
 8003610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003612:	bf00      	nop
 8003614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003616:	bc08      	pop	{r3}
 8003618:	469e      	mov	lr, r3
 800361a:	4770      	bx	lr

0800361c <_fini>:
 800361c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800361e:	bf00      	nop
 8003620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003622:	bc08      	pop	{r3}
 8003624:	469e      	mov	lr, r3
 8003626:	4770      	bx	lr
